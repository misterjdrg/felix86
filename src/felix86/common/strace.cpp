// Generated by generate_strace_switch.cpp
#include <cstdio>
#include <string>
#include <fmt/format.h>
#include "felix86/common/log.hpp"
#include "felix86/common/types.hpp"

struct nullable {
    const char* str;
    explicit nullable(const char* s) : str(s) {}
};

auto format_as(nullable n) {
    return n.str ? n.str : "(null)";
}

std::string trace64(int syscall_no, u64 arg1, u64 arg2, u64 arg3, u64 arg4, u64 arg5, u64 arg6) {
    switch (syscall_no) {
    case 0: {
        return fmt::format("read: {{\n    unsigned int fd = 0x{:x}\n    char *buf = {}\n    size_t count = 0x{:x}\n}}", (int)arg1,
                           nullable((const char*)arg2), (u64)arg3);
    }
    case 1: {
        return fmt::format("write: {{\n    unsigned int fd = 0x{:x}\n    const char *buf = {}\n    size_t count = 0x{:x}\n}}", (int)arg1,
                           nullable((const char*)arg2), (u64)arg3);
    }
    case 2: {
        return fmt::format("open: {{\n    const char *filename = {}\n    int flags = 0x{:x}\n    umode_t mode = {}\n}}", nullable((const char*)arg1),
                           (int)arg2, (void*)arg3);
    }
    case 3: {
        return fmt::format("close: {{\n    unsigned int fd = 0x{:x}\n}}", (int)arg1);
    }
    case 4: {
        return fmt::format("newstat: {{\n    const char *filename = {}\n    struct stat *statbuf = {}\n}}", nullable((const char*)arg1), (void*)arg2);
    }
    case 5: {
        return fmt::format("newfstat: {{\n    unsigned int fd = 0x{:x}\n    struct stat *statbuf = {}\n}}", (int)arg1, (void*)arg2);
    }
    case 6: {
        return fmt::format("newlstat: {{\n    const char *filename = {}\n    struct stat *statbuf = {}\n}}", nullable((const char*)arg1),
                           (void*)arg2);
    }
    case 7: {
        return fmt::format("poll: {{\n    struct pollfd *ufds = {}\n    unsigned int nfds = 0x{:x}\n    int timeout_msecs = 0x{:x}\n}}", (void*)arg1,
                           (int)arg2, (int)arg3);
    }
    case 8: {
        return fmt::format("lseek: {{\n    unsigned int fd = 0x{:x}\n    off_t offset = 0x{:x}\n    unsigned int whence = 0x{:x}\n}}", (int)arg1,
                           (u64)arg2, (int)arg3);
    }
    case 9: {
        return fmt::format("mmap: {{\n    unsigned long addr = 0x{:x}\n    unsigned long len = 0x{:x}\n    unsigned long prot = 0x{:x}\n    unsigned "
                           "long flags = 0x{:x}\n    unsigned long fd = 0x{:x}\n    unsigned long off = 0x{:x}\n}}",
                           (u64)arg1, (u64)arg2, (u64)arg3, (u64)arg4, (u64)arg5, (u64)arg6);
    }
    case 10: {
        return fmt::format("mprotect: {{\n    unsigned long start = 0x{:x}\n    size_t len = 0x{:x}\n    unsigned long prot = 0x{:x}\n}}", (u64)arg1,
                           (u64)arg2, (u64)arg3);
    }
    case 11: {
        return fmt::format("munmap: {{\n    unsigned long addr = 0x{:x}\n    size_t len = 0x{:x}\n}}", (u64)arg1, (u64)arg2);
    }
    case 12: {
        return fmt::format("brk: {{\n    unsigned long brk = 0x{:x}\n}}", (u64)arg1);
    }
    case 13: {
        return fmt::format("rt_sigaction: {{\n    int sig = 0x{:x}\n    const struct sigaction *act = {}\n    struct sigaction *oact = {}\n    "
                           "size_t sigsetsize = 0x{:x}\n}}",
                           (int)arg1, (void*)arg2, (void*)arg3, (u64)arg4);
    }
    case 14: {
        return fmt::format(
            "rt_sigprocmask: {{\n    int how = 0x{:x}\n    sigset_t *nset = {}\n    sigset_t *oset = {}\n    size_t sigsetsize = 0x{:x}\n}}",
            (int)arg1, (void*)arg2, (void*)arg3, (u64)arg4);
    }
    case 15: {
        return fmt::format("rt_sigreturn: {{}}");
    }
    case 16: {
        return fmt::format("ioctl: {{\n    unsigned int fd = 0x{:x}\n    unsigned int cmd = 0x{:x}\n    unsigned long arg = 0x{:x}\n}}", (int)arg1,
                           (int)arg2, (u64)arg3);
    }
    case 17: {
        return fmt::format("pread64: {{\n    unsigned int fd = 0x{:x}\n    char *buf = {}\n    size_t count = 0x{:x}\n    loff_t pos = 0x{:x}\n}}",
                           (int)arg1, nullable((const char*)arg2), (u64)arg3, (u64)arg4);
    }
    case 18: {
        return fmt::format(
            "pwrite64: {{\n    unsigned int fd = 0x{:x}\n    const char *buf = {}\n    size_t count = 0x{:x}\n    loff_t pos = 0x{:x}\n}}", (int)arg1,
            nullable((const char*)arg2), (u64)arg3, (u64)arg4);
    }
    case 19: {
        return fmt::format("readv: {{\n    unsigned long fd = 0x{:x}\n    const struct iovec *vec = {}\n    unsigned long vlen = 0x{:x}\n}}",
                           (u64)arg1, (void*)arg2, (u64)arg3);
    }
    case 20: {
        return fmt::format("writev: {{\n    unsigned long fd = 0x{:x}\n    const struct iovec *vec = {}\n    unsigned long vlen = 0x{:x}\n}}",
                           (u64)arg1, (void*)arg2, (u64)arg3);
    }
    case 21: {
        return fmt::format("access: {{\n    const char *filename = {}\n    int mode = 0x{:x}\n}}", nullable((const char*)arg1), (int)arg2);
    }
    case 22: {
        return fmt::format("pipe: {{\n    int *fildes = {}\n}}", (void*)arg1);
    }
    case 23: {
        return fmt::format("select: {{\n    int n = 0x{:x}\n    fd_set *inp = {}\n    fd_set *outp = {}\n    fd_set *exp = {}\n    struct "
                           "__kernel_old_timeval *tvp = {}\n}}",
                           (int)arg1, (void*)arg2, (void*)arg3, (void*)arg4, (void*)arg5);
    }
    case 24: {
        return fmt::format("sched_yield: {{}}");
    }
    case 25: {
        return fmt::format("mremap: {{\n    unsigned long addr = 0x{:x}\n    unsigned long old_len = 0x{:x}\n    unsigned long new_len = 0x{:x}\n    "
                           "unsigned long flags = 0x{:x}\n    unsigned long new_addr = 0x{:x}\n}}",
                           (u64)arg1, (u64)arg2, (u64)arg3, (u64)arg4, (u64)arg5);
    }
    case 26: {
        return fmt::format("msync: {{\n    unsigned long start = 0x{:x}\n    size_t len = 0x{:x}\n    int flags = 0x{:x}\n}}", (u64)arg1, (u64)arg2,
                           (int)arg3);
    }
    case 27: {
        return fmt::format("mincore: {{\n    unsigned long start = 0x{:x}\n    size_t len = 0x{:x}\n    unsigned char *vec = {}\n}}", (u64)arg1,
                           (u64)arg2, (void*)arg3);
    }
    case 28: {
        return fmt::format("madvise: {{\n    unsigned long start = 0x{:x}\n    size_t len_in = 0x{:x}\n    int behavior = 0x{:x}\n}}", (u64)arg1,
                           (u64)arg2, (int)arg3);
    }
    case 29: {
        return fmt::format("shmget: {{\n    key_t key = {}\n    size_t size = 0x{:x}\n    int shmflg = 0x{:x}\n}}", (void*)arg1, (u64)arg2,
                           (int)arg3);
    }
    case 30: {
        return fmt::format("shmat: {{\n    int shmid = 0x{:x}\n    char *shmaddr = {}\n    int shmflg = 0x{:x}\n}}", (int)arg1,
                           nullable((const char*)arg2), (int)arg3);
    }
    case 31: {
        return fmt::format("shmctl: {{\n    int shmid = 0x{:x}\n    int cmd = 0x{:x}\n    struct shmid_ds *buf = {}\n}}", (int)arg1, (int)arg2,
                           (void*)arg3);
    }
    case 32: {
        return fmt::format("dup: {{\n    unsigned int fildes = 0x{:x}\n}}", (int)arg1);
    }
    case 33: {
        return fmt::format("dup2: {{\n    unsigned int oldfd = 0x{:x}\n    unsigned int newfd = 0x{:x}\n}}", (int)arg1, (int)arg2);
    }
    case 34: {
        return fmt::format("pause: {{}}");
    }
    case 35: {
        return fmt::format("nanosleep: {{\n    struct __kernel_timespec *rqtp = {}\n    struct __kernel_timespec *rmtp = {}\n}}", (void*)arg1,
                           (void*)arg2);
    }
    case 36: {
        return fmt::format("getitimer: {{\n    int which = 0x{:x}\n    struct __kernel_old_itimerval *value = {}\n}}", (int)arg1, (void*)arg2);
    }
    case 37: {
        return fmt::format("alarm: {{\n    unsigned int seconds = 0x{:x}\n}}", (int)arg1);
    }
    case 38: {
        return fmt::format("setitimer: {{\n    int which = 0x{:x}\n    struct __kernel_old_itimerval *value = {}\n    struct __kernel_old_itimerval "
                           "*ovalue = {}\n}}",
                           (int)arg1, (void*)arg2, (void*)arg3);
    }
    case 39: {
        return fmt::format("getpid: {{}}");
    }
    case 40: {
        return fmt::format("sendfile64: {{\n    int out_fd = 0x{:x}\n    int in_fd = 0x{:x}\n    loff_t *offset = {}\n    size_t count = 0x{:x}\n}}",
                           (int)arg1, (int)arg2, (void*)arg3, (u64)arg4);
    }
    case 41: {
        return fmt::format("socket: {{\n    int family = 0x{:x}\n    int type = 0x{:x}\n    int protocol = 0x{:x}\n}}", (int)arg1, (int)arg2,
                           (int)arg3);
    }
    case 42: {
        return fmt::format("connect: {{\n    int fd = 0x{:x}\n    struct sockaddr *uservaddr = {}\n    int addrlen = 0x{:x}\n}}", (int)arg1,
                           (void*)arg2, (int)arg3);
    }
    case 43: {
        return fmt::format("accept: {{\n    int fd = 0x{:x}\n    struct sockaddr *upeer_sockaddr = {}\n    int *upeer_addrlen = {}\n}}", (int)arg1,
                           (void*)arg2, (void*)arg3);
    }
    case 44: {
        return fmt::format("sendto: {{\n    int fd = 0x{:x}\n    void *buff = {}\n    size_t len = 0x{:x}\n    unsigned int flags = 0x{:x}\n    "
                           "struct sockaddr *addr = {}\n    int addr_len = 0x{:x}\n}}",
                           (int)arg1, (void*)arg2, (u64)arg3, (int)arg4, (void*)arg5, (int)arg6);
    }
    case 45: {
        return fmt::format("recvfrom: {{\n    int fd = 0x{:x}\n    void *ubuf = {}\n    size_t size = 0x{:x}\n    unsigned int flags = 0x{:x}\n    "
                           "struct sockaddr *addr = {}\n    int *addr_len = {}\n}}",
                           (int)arg1, (void*)arg2, (u64)arg3, (int)arg4, (void*)arg5, (void*)arg6);
    }
    case 46: {
        return fmt::format("sendmsg: {{\n    int fd = 0x{:x}\n    struct user_msghdr *msg = {}\n    unsigned int flags = 0x{:x}\n}}", (int)arg1,
                           (void*)arg2, (int)arg3);
    }
    case 47: {
        return fmt::format("recvmsg: {{\n    int fd = 0x{:x}\n    struct user_msghdr *msg = {}\n    unsigned int flags = 0x{:x}\n}}", (int)arg1,
                           (void*)arg2, (int)arg3);
    }
    case 48: {
        return fmt::format("shutdown: {{\n    int fd = 0x{:x}\n    int how = 0x{:x}\n}}", (int)arg1, (int)arg2);
    }
    case 49: {
        return fmt::format("bind: {{\n    int fd = 0x{:x}\n    struct sockaddr *umyaddr = {}\n    int addrlen = 0x{:x}\n}}", (int)arg1, (void*)arg2,
                           (int)arg3);
    }
    case 50: {
        return fmt::format("listen: {{\n    int fd = 0x{:x}\n    int backlog = 0x{:x}\n}}", (int)arg1, (int)arg2);
    }
    case 51: {
        return fmt::format("getsockname: {{\n    int fd = 0x{:x}\n    struct sockaddr *usockaddr = {}\n    int *usockaddr_len = {}\n}}", (int)arg1,
                           (void*)arg2, (void*)arg3);
    }
    case 52: {
        return fmt::format("getpeername: {{\n    int fd = 0x{:x}\n    struct sockaddr *usockaddr = {}\n    int *usockaddr_len = {}\n}}", (int)arg1,
                           (void*)arg2, (void*)arg3);
    }
    case 53: {
        return fmt::format("socketpair: {{\n    int family = 0x{:x}\n    int type = 0x{:x}\n    int protocol = 0x{:x}\n    int *usockvec = {}\n}}",
                           (int)arg1, (int)arg2, (int)arg3, (void*)arg4);
    }
    case 54: {
        return fmt::format("setsockopt: {{\n    int fd = 0x{:x}\n    int level = 0x{:x}\n    int optname = 0x{:x}\n    char *optval = {}\n    int "
                           "optlen = 0x{:x}\n}}",
                           (int)arg1, (int)arg2, (int)arg3, nullable((const char*)arg4), (int)arg5);
    }
    case 55: {
        return fmt::format(
            "getsockopt: {{\n    int fd = 0x{:x}\n    int level = 0x{:x}\n    int optname = 0x{:x}\n    char *optval = {}\n    int *optlen = {}\n}}",
            (int)arg1, (int)arg2, (int)arg3, nullable((const char*)arg4), (void*)arg5);
    }
    case 56: {
        return fmt::format("clone: {{\n    unsigned long clone_flags = 0x{:x}\n    unsigned long newsp = 0x{:x}\n    int *parent_tidptr = {}\n    "
                           "int *child_tidptr = {}\n    unsigned long tls = 0x{:x}\n}}",
                           (u64)arg1, (u64)arg2, (void*)arg3, (void*)arg4, (u64)arg5);
    }
    case 57: {
        return fmt::format("fork: {{}}");
    }
    case 58: {
        return fmt::format("vfork: {{}}");
    }
    case 59: {
        return fmt::format("execve: {{\n    const char *filename = {}\n    const char *const *argv = {}\n    const char *const *envp = {}\n}}",
                           nullable((const char*)arg1), (void*)arg2, (void*)arg3);
    }
    case 60: {
        return fmt::format("exit: {{\n    int error_code = 0x{:x}\n}}", (int)arg1);
    }
    case 61: {
        return fmt::format("wait4: {{\n    pid_t upid = {}\n    int *stat_addr = {}\n    int options = 0x{:x}\n    struct rusage *ru = {}\n}}",
                           (void*)arg1, (void*)arg2, (int)arg3, (void*)arg4);
    }
    case 62: {
        return fmt::format("kill: {{\n    pid_t pid = {}\n    int sig = 0x{:x}\n}}", (void*)arg1, (int)arg2);
    }
    case 63: {
        return fmt::format("newuname: {{\n    struct new_utsname *name = {}\n}}", (void*)arg1);
    }
    case 64: {
        return fmt::format("semget: {{\n    key_t key = {}\n    int nsems = 0x{:x}\n    int semflg = 0x{:x}\n}}", (void*)arg1, (int)arg2, (int)arg3);
    }
    case 65: {
        return fmt::format("semop: {{\n    int semid = 0x{:x}\n    struct sembuf *tsops = {}\n    unsigned nsops = {}\n}}", (int)arg1, (void*)arg2,
                           (void*)arg3);
    }
    case 66: {
        return fmt::format("semctl: {{\n    int semid = 0x{:x}\n    int semnum = 0x{:x}\n    int cmd = 0x{:x}\n    unsigned long arg = 0x{:x}\n}}",
                           (int)arg1, (int)arg2, (int)arg3, (u64)arg4);
    }
    case 67: {
        return fmt::format("shmdt: {{\n    void *shmaddr = 0x{:x}\n}}", arg1);
    }
    case 68: {
        return fmt::format("msgget: {{\n    key_t key = {}\n    int msgflg = 0x{:x}\n}}", (void*)arg1, (int)arg2);
    }
    case 69: {
        return fmt::format("msgsnd: {{\n    int msqid = 0x{:x}\n    struct msgbuf *msgp = {}\n    size_t msgsz = 0x{:x}\n    int msgflg = 0x{:x}\n}}",
                           (int)arg1, (void*)arg2, (u64)arg3, (int)arg4);
    }
    case 70: {
        return fmt::format("msgrcv: {{\n    int msqid = 0x{:x}\n    struct msgbuf *msgp = {}\n    size_t msgsz = 0x{:x}\n    long msgtyp = 0x{:x}\n  "
                           "  int msgflg = 0x{:x}\n}}",
                           (int)arg1, (void*)arg2, (u64)arg3, (u64)arg4, (int)arg5);
    }
    case 71: {
        return fmt::format("msgctl: {{\n    int msqid = 0x{:x}\n    int cmd = 0x{:x}\n    struct msqid_ds *buf = {}\n}}", (int)arg1, (int)arg2,
                           (void*)arg3);
    }
    case 72: {
        return fmt::format("fcntl: {{\n    unsigned int fd = 0x{:x}\n    unsigned int cmd = 0x{:x}\n    unsigned long arg = 0x{:x}\n}}", (int)arg1,
                           (int)arg2, (u64)arg3);
    }
    case 73: {
        return fmt::format("flock: {{\n    unsigned int fd = 0x{:x}\n    unsigned int cmd = 0x{:x}\n}}", (int)arg1, (int)arg2);
    }
    case 74: {
        return fmt::format("fsync: {{\n    unsigned int fd = 0x{:x}\n}}", (int)arg1);
    }
    case 75: {
        return fmt::format("fdatasync: {{\n    unsigned int fd = 0x{:x}\n}}", (int)arg1);
    }
    case 76: {
        return fmt::format("truncate: {{\n    const char *path = {}\n    long length = 0x{:x}\n}}", nullable((const char*)arg1), (u64)arg2);
    }
    case 77: {
        return fmt::format("ftruncate: {{\n    unsigned int fd = 0x{:x}\n    unsigned long length = 0x{:x}\n}}", (int)arg1, (u64)arg2);
    }
    case 78: {
        return fmt::format("getdents: {{\n    unsigned int fd = 0x{:x}\n    struct linux_dirent *dirent = {}\n    unsigned int count = 0x{:x}\n}}",
                           (int)arg1, (void*)arg2, (int)arg3);
    }
    case 79: {
        return fmt::format("getcwd: {{\n    char *buf = {}\n    unsigned long size = 0x{:x}\n}}", nullable((const char*)arg1), (u64)arg2);
    }
    case 80: {
        return fmt::format("chdir: {{\n    const char *filename = {}\n}}", nullable((const char*)arg1));
    }
    case 81: {
        return fmt::format("fchdir: {{\n    unsigned int fd = 0x{:x}\n}}", (int)arg1);
    }
    case 82: {
        return fmt::format("rename: {{\n    const char *oldname = {}\n    const char *newname = {}\n}}", nullable((const char*)arg1),
                           nullable((const char*)arg2));
    }
    case 83: {
        return fmt::format("mkdir: {{\n    const char *pathname = {}\n    umode_t mode = {}\n}}", nullable((const char*)arg1), (void*)arg2);
    }
    case 84: {
        return fmt::format("rmdir: {{\n    const char *pathname = {}\n}}", nullable((const char*)arg1));
    }
    case 85: {
        return fmt::format("creat: {{\n    const char *pathname = {}\n    umode_t mode = {}\n}}", nullable((const char*)arg1), (void*)arg2);
    }
    case 86: {
        return fmt::format("link: {{\n    const char *oldname = {}\n    const char *newname = {}\n}}", nullable((const char*)arg1),
                           nullable((const char*)arg2));
    }
    case 87: {
        return fmt::format("unlink: {{\n    const char *pathname = {}\n}}", nullable((const char*)arg1));
    }
    case 88: {
        return fmt::format("symlink: {{\n    const char *oldname = {}\n    const char *newname = {}\n}}", nullable((const char*)arg1),
                           nullable((const char*)arg2));
    }
    case 89: {
        return fmt::format("readlink: {{\n    const char *path = {}\n    char *buf = {}\n    int bufsiz = 0x{:x}\n}}", nullable((const char*)arg1),
                           nullable((const char*)arg2), (int)arg3);
    }
    case 90: {
        return fmt::format("chmod: {{\n    const char *filename = {}\n    umode_t mode = {}\n}}", nullable((const char*)arg1), (void*)arg2);
    }
    case 91: {
        return fmt::format("fchmod: {{\n    unsigned int fd = 0x{:x}\n    umode_t mode = {}\n}}", (int)arg1, (void*)arg2);
    }
    case 92: {
        return fmt::format("chown: {{\n    const char *filename = {}\n    uid_t user = {}\n    gid_t group = {}\n}}", nullable((const char*)arg1),
                           (void*)arg2, (void*)arg3);
    }
    case 93: {
        return fmt::format("fchown: {{\n    unsigned int fd = 0x{:x}\n    uid_t user = {}\n    gid_t group = {}\n}}", (int)arg1, (void*)arg2,
                           (void*)arg3);
    }
    case 94: {
        return fmt::format("lchown: {{\n    const char *filename = {}\n    uid_t user = {}\n    gid_t group = {}\n}}", nullable((const char*)arg1),
                           (void*)arg2, (void*)arg3);
    }
    case 95: {
        return fmt::format("umask: {{\n    int mask = 0x{:x}\n}}", (int)arg1);
    }
    case 96: {
        return fmt::format("gettimeofday: {{\n    struct __kernel_old_timeval *tv = {}\n    struct timezone *tz = {}\n}}", (void*)arg1, (void*)arg2);
    }
    case 97: {
        return fmt::format("getrlimit: {{\n    unsigned int resource = 0x{:x}\n    struct rlimit *rlim = {}\n}}", (int)arg1, (void*)arg2);
    }
    case 98: {
        return fmt::format("getrusage: {{\n    int who = 0x{:x}\n    struct rusage *ru = {}\n}}", (int)arg1, (void*)arg2);
    }
    case 99: {
        return fmt::format("sysinfo: {{\n    struct sysinfo *info = {}\n}}", (void*)arg1);
    }
    case 100: {
        return fmt::format("times: {{\n    struct tms *tbuf = {}\n}}", (void*)arg1);
    }
    case 101: {
        return fmt::format(
            "ptrace: {{\n    long request = 0x{:x}\n    long pid = 0x{:x}\n    unsigned long addr = 0x{:x}\n    unsigned long data = 0x{:x}\n}}",
            (u64)arg1, (u64)arg2, (u64)arg3, (u64)arg4);
    }
    case 102: {
        return fmt::format("getuid: {{}}");
    }
    case 103: {
        return fmt::format("syslog: {{\n    int type = 0x{:x}\n    char *buf = {}\n    int len = 0x{:x}\n}}", (int)arg1, nullable((const char*)arg2),
                           (int)arg3);
    }
    case 104: {
        return fmt::format("getgid: {{}}");
    }
    case 105: {
        return fmt::format("setuid: {{\n    uid_t uid = {}\n}}", (void*)arg1);
    }
    case 106: {
        return fmt::format("setgid: {{\n    gid_t gid = {}\n}}", (void*)arg1);
    }
    case 107: {
        return fmt::format("geteuid: {{}}");
    }
    case 108: {
        return fmt::format("getegid: {{}}");
    }
    case 109: {
        return fmt::format("setpgid: {{\n    pid_t pid = {}\n    pid_t pgid = {}\n}}", (void*)arg1, (void*)arg2);
    }
    case 110: {
        return fmt::format("getppid: {{}}");
    }
    case 111: {
        return fmt::format("getpgrp: {{}}");
    }
    case 112: {
        return fmt::format("setsid: {{}}");
    }
    case 113: {
        return fmt::format("setreuid: {{\n    uid_t ruid = {}\n    uid_t euid = {}\n}}", (void*)arg1, (void*)arg2);
    }
    case 114: {
        return fmt::format("setregid: {{\n    gid_t rgid = {}\n    gid_t egid = {}\n}}", (void*)arg1, (void*)arg2);
    }
    case 115: {
        return fmt::format("getgroups: {{\n    int gidsetsize = 0x{:x}\n    gid_t *grouplist = {}\n}}", (int)arg1, (void*)arg2);
    }
    case 116: {
        return fmt::format("setgroups: {{\n    int gidsetsize = 0x{:x}\n    gid_t *grouplist = {}\n}}", (int)arg1, (void*)arg2);
    }
    case 117: {
        return fmt::format("setresuid: {{\n    uid_t ruid = {}\n    uid_t euid = {}\n    uid_t suid = {}\n}}", (void*)arg1, (void*)arg2, (void*)arg3);
    }
    case 118: {
        return fmt::format("getresuid: {{\n    uid_t *ruidp = {}\n    uid_t *euidp = {}\n    uid_t *suidp = {}\n}}", (void*)arg1, (void*)arg2,
                           (void*)arg3);
    }
    case 119: {
        return fmt::format("setresgid: {{\n    gid_t rgid = {}\n    gid_t egid = {}\n    gid_t sgid = {}\n}}", (void*)arg1, (void*)arg2, (void*)arg3);
    }
    case 120: {
        return fmt::format("getresgid: {{\n    gid_t *rgidp = {}\n    gid_t *egidp = {}\n    gid_t *sgidp = {}\n}}", (void*)arg1, (void*)arg2,
                           (void*)arg3);
    }
    case 121: {
        return fmt::format("getpgid: {{\n    pid_t pid = {}\n}}", (void*)arg1);
    }
    case 122: {
        return fmt::format("setfsuid: {{\n    uid_t uid = {}\n}}", (void*)arg1);
    }
    case 123: {
        return fmt::format("setfsgid: {{\n    gid_t gid = {}\n}}", (void*)arg1);
    }
    case 124: {
        return fmt::format("getsid: {{\n    pid_t pid = {}\n}}", (void*)arg1);
    }
    case 125: {
        return fmt::format("capget: {{\n    cap_user_header_t header = {}\n    cap_user_data_t dataptr = {}\n}}", (void*)arg1, (void*)arg2);
    }
    case 126: {
        return fmt::format("capset: {{\n    cap_user_header_t header = {}\n    const cap_user_data_t data = {}\n}}", (void*)arg1, (void*)arg2);
    }
    case 127: {
        return fmt::format("rt_sigpending: {{\n    sigset_t *uset = {}\n    size_t sigsetsize = 0x{:x}\n}}", (void*)arg1, (u64)arg2);
    }
    case 128: {
        return fmt::format("rt_sigtimedwait: {{\n    const sigset_t *uthese = {}\n    siginfo_t *uinfo = {}\n    const struct __kernel_timespec *uts "
                           "= {}\n    size_t sigsetsize = 0x{:x}\n}}",
                           (void*)arg1, (void*)arg2, (void*)arg3, (u64)arg4);
    }
    case 129: {
        return fmt::format("rt_sigqueueinfo: {{\n    pid_t pid = {}\n    int sig = 0x{:x}\n    siginfo_t *uinfo = {}\n}}", (void*)arg1, (int)arg2,
                           (void*)arg3);
    }
    case 130: {
        return fmt::format("rt_sigsuspend: {{\n    sigset_t *unewset = {}\n    size_t sigsetsize = 0x{:x}\n}}", (void*)arg1, (u64)arg2);
    }
    case 131: {
        return fmt::format("sigaltstack: {{\n    const stack_t *uss = {}\n    stack_t *uoss = {}\n}}", (void*)arg1, (void*)arg2);
    }
    case 132: {
        return fmt::format("utime: {{\n    char *filename = {}\n    struct utimbuf *times = {}\n}}", nullable((const char*)arg1), (void*)arg2);
    }
    case 133: {
        return fmt::format("mknod: {{\n    const char *filename = {}\n    umode_t mode = {}\n    unsigned dev = {}\n}}", nullable((const char*)arg1),
                           (void*)arg2, (void*)arg3);
    }
    case 135: {
        return fmt::format("personality: {{\n    unsigned int personality = 0x{:x}\n}}", (int)arg1);
    }
    case 136: {
        return fmt::format("ustat: {{\n    unsigned dev = {}\n    struct ustat *ubuf = {}\n}}", (void*)arg1, (void*)arg2);
    }
    case 137: {
        return fmt::format("statfs: {{\n    const char *pathname = {}\n    struct statfs *buf = {}\n}}", nullable((const char*)arg1), (void*)arg2);
    }
    case 138: {
        return fmt::format("fstatfs: {{\n    unsigned int fd = 0x{:x}\n    struct statfs *buf = {}\n}}", (int)arg1, (void*)arg2);
    }
    case 139: {
        return fmt::format("sysfs: {{\n    int option = 0x{:x}\n    unsigned long arg1 = 0x{:x}\n    unsigned long arg2 = 0x{:x}\n}}", (int)arg1,
                           (u64)arg2, (u64)arg3);
    }
    case 140: {
        return fmt::format("getpriority: {{\n    int which = 0x{:x}\n    int who = 0x{:x}\n}}", (int)arg1, (int)arg2);
    }
    case 141: {
        return fmt::format("setpriority: {{\n    int which = 0x{:x}\n    int who = 0x{:x}\n    int niceval = 0x{:x}\n}}", (int)arg1, (int)arg2,
                           (int)arg3);
    }
    case 142: {
        return fmt::format("sched_setparam: {{\n    pid_t pid = {}\n    struct sched_param *param = {}\n}}", (void*)arg1, (void*)arg2);
    }
    case 143: {
        return fmt::format("sched_getparam: {{\n    pid_t pid = {}\n    struct sched_param *param = {}\n}}", (void*)arg1, (void*)arg2);
    }
    case 144: {
        return fmt::format("sched_setscheduler: {{\n    pid_t pid = {}\n    int policy = 0x{:x}\n    struct sched_param *param = {}\n}}", (void*)arg1,
                           (int)arg2, (void*)arg3);
    }
    case 145: {
        return fmt::format("sched_getscheduler: {{\n    pid_t pid = {}\n}}", (void*)arg1);
    }
    case 146: {
        return fmt::format("sched_get_priority_max: {{\n    int policy = 0x{:x}\n}}", (int)arg1);
    }
    case 147: {
        return fmt::format("sched_get_priority_min: {{\n    int policy = 0x{:x}\n}}", (int)arg1);
    }
    case 148: {
        return fmt::format("sched_rr_get_interval: {{\n    pid_t pid = {}\n    struct __kernel_timespec *interval = {}\n}}", (void*)arg1,
                           (void*)arg2);
    }
    case 149: {
        return fmt::format("mlock: {{\n    unsigned long start = 0x{:x}\n    size_t len = 0x{:x}\n}}", (u64)arg1, (u64)arg2);
    }
    case 150: {
        return fmt::format("munlock: {{\n    unsigned long start = 0x{:x}\n    size_t len = 0x{:x}\n}}", (u64)arg1, (u64)arg2);
    }
    case 151: {
        return fmt::format("mlockall: {{\n    int flags = 0x{:x}\n}}", (int)arg1);
    }
    case 152: {
        return fmt::format("munlockall: {{}}");
    }
    case 153: {
        return fmt::format("vhangup: {{}}");
    }
    case 154: {
        return fmt::format("modify_ldt: {{\n    int func = 0x{:x}\n    void *ptr = {}\n    unsigned long bytecount = 0x{:x}\n}}", (int)arg1,
                           (void*)arg2, (u64)arg3);
    }
    case 155: {
        return fmt::format("pivot_root: {{\n    const char *new_root = {}\n    const char *put_old = {}\n}}", nullable((const char*)arg1),
                           nullable((const char*)arg2));
    }
    case 157: {
        return fmt::format("prctl: {{\n    int option = 0x{:x}\n    unsigned long arg2 = 0x{:x}\n    unsigned long arg3 = 0x{:x}\n    unsigned long "
                           "arg4 = 0x{:x}\n    unsigned long arg5 = 0x{:x}\n}}",
                           (int)arg1, (u64)arg2, (u64)arg3, (u64)arg4, (u64)arg5);
    }
    case 158: {
        return fmt::format("arch_prctl: {{\n    int option = 0x{:x}\n    unsigned long arg2 = 0x{:x}\n}}", (int)arg1, (u64)arg2);
    }
    case 159: {
        return fmt::format("adjtimex: {{\n    struct __kernel_timex *txc_p = {}\n}}", (void*)arg1);
    }
    case 160: {
        return fmt::format("setrlimit: {{\n    unsigned int resource = 0x{:x}\n    struct rlimit *rlim = {}\n}}", (int)arg1, (void*)arg2);
    }
    case 161: {
        return fmt::format("chroot: {{\n    const char *filename = {}\n}}", nullable((const char*)arg1));
    }
    case 162: {
        return fmt::format("sync: {{}}");
    }
    case 163: {
        return fmt::format("acct: {{\n    const char *name = {}\n}}", nullable((const char*)arg1));
    }
    case 164: {
        return fmt::format("settimeofday: {{\n    struct __kernel_old_timeval *tv = {}\n    struct timezone *tz = {}\n}}", (void*)arg1, (void*)arg2);
    }
    case 165: {
        return fmt::format("mount: {{\n    char *dev_name = {}\n    char *dir_name = {}\n    char *type = {}\n    unsigned long flags = 0x{:x}\n    "
                           "void *data = {}\n}}",
                           nullable((const char*)arg1), nullable((const char*)arg2), nullable((const char*)arg3), (u64)arg4, (void*)arg5);
    }
    case 166: {
        return fmt::format("umount: {{\n    char *name = {}\n    int flags = 0x{:x}\n}}", nullable((const char*)arg1), (int)arg2);
    }
    case 167: {
        return fmt::format("swapon: {{\n    const char *specialfile = {}\n    int swap_flags = 0x{:x}\n}}", nullable((const char*)arg1), (int)arg2);
    }
    case 168: {
        return fmt::format("swapoff: {{\n    const char *specialfile = {}\n}}", nullable((const char*)arg1));
    }
    case 169: {
        return fmt::format("reboot: {{\n    int magic1 = 0x{:x}\n    int magic2 = 0x{:x}\n    unsigned int cmd = 0x{:x}\n    void *arg = {}\n}}",
                           (int)arg1, (int)arg2, (int)arg3, (void*)arg4);
    }
    case 170: {
        return fmt::format("sethostname: {{\n    char *name = {}\n    int len = 0x{:x}\n}}", nullable((const char*)arg1), (int)arg2);
    }
    case 171: {
        return fmt::format("setdomainname: {{\n    char *name = {}\n    int len = 0x{:x}\n}}", nullable((const char*)arg1), (int)arg2);
    }
    case 172: {
        return fmt::format("iopl: {{\n    unsigned int level = 0x{:x}\n}}", (int)arg1);
    }
    case 173: {
        return fmt::format("ioperm: {{\n    unsigned long from = 0x{:x}\n    unsigned long num = 0x{:x}\n    int turn_on = 0x{:x}\n}}", (u64)arg1,
                           (u64)arg2, (int)arg3);
    }
    case 175: {
        return fmt::format("init_module: {{\n    void *umod = {}\n    unsigned long len = 0x{:x}\n    const char *uargs = {}\n}}", (void*)arg1,
                           (u64)arg2, nullable((const char*)arg3));
    }
    case 176: {
        return fmt::format("delete_module: {{\n    const char *name_user = {}\n    unsigned int flags = 0x{:x}\n}}", nullable((const char*)arg1),
                           (int)arg2);
    }
    case 179: {
        return fmt::format("quotactl: {{\n    unsigned int cmd = 0x{:x}\n    const char *special = {}\n    qid_t id = {}\n    void *addr = {}\n}}",
                           (int)arg1, nullable((const char*)arg2), (void*)arg3, (void*)arg4);
    }
    case 186: {
        return fmt::format("gettid: {{}}");
    }
    case 187: {
        return fmt::format("readahead: {{\n    int fd = 0x{:x}\n    loff_t offset = 0x{:x}\n    size_t count = 0x{:x}\n}}", (int)arg1, (u64)arg2,
                           (u64)arg3);
    }
    case 188: {
        return fmt::format("setxattr: {{\n    const char *pathname = {}\n    const char *name = {}\n    const void *value = {}\n    size_t size = "
                           "0x{:x}\n    int flags = 0x{:x}\n}}",
                           nullable((const char*)arg1), nullable((const char*)arg2), (void*)arg3, (u64)arg4, (int)arg5);
    }
    case 189: {
        return fmt::format("lsetxattr: {{\n    const char *pathname = {}\n    const char *name = {}\n    const void *value = {}\n    size_t size = "
                           "0x{:x}\n    int flags = 0x{:x}\n}}",
                           nullable((const char*)arg1), nullable((const char*)arg2), (void*)arg3, (u64)arg4, (int)arg5);
    }
    case 190: {
        return fmt::format("fsetxattr: {{\n    int fd = 0x{:x}\n    const char *name = {}\n    const void *value = {}\n    size_t size = 0x{:x}\n    "
                           "int flags = 0x{:x}\n}}",
                           (int)arg1, nullable((const char*)arg2), (void*)arg3, (u64)arg4, (int)arg5);
    }
    case 191: {
        return fmt::format(
            "getxattr: {{\n    const char *pathname = {}\n    const char *name = {}\n    void *value = {}\n    size_t size = 0x{:x}\n}}",
            nullable((const char*)arg1), nullable((const char*)arg2), (void*)arg3, (u64)arg4);
    }
    case 192: {
        return fmt::format(
            "lgetxattr: {{\n    const char *pathname = {}\n    const char *name = {}\n    void *value = {}\n    size_t size = 0x{:x}\n}}",
            nullable((const char*)arg1), nullable((const char*)arg2), (void*)arg3, (u64)arg4);
    }
    case 193: {
        return fmt::format("fgetxattr: {{\n    int fd = 0x{:x}\n    const char *name = {}\n    void *value = {}\n    size_t size = 0x{:x}\n}}",
                           (int)arg1, nullable((const char*)arg2), (void*)arg3, (u64)arg4);
    }
    case 194: {
        return fmt::format("listxattr: {{\n    const char *pathname = {}\n    char *list = {}\n    size_t size = 0x{:x}\n}}",
                           nullable((const char*)arg1), nullable((const char*)arg2), (u64)arg3);
    }
    case 195: {
        return fmt::format("llistxattr: {{\n    const char *pathname = {}\n    char *list = {}\n    size_t size = 0x{:x}\n}}",
                           nullable((const char*)arg1), nullable((const char*)arg2), (u64)arg3);
    }
    case 196: {
        return fmt::format("flistxattr: {{\n    int fd = 0x{:x}\n    char *list = {}\n    size_t size = 0x{:x}\n}}", (int)arg1,
                           nullable((const char*)arg2), (u64)arg3);
    }
    case 197: {
        return fmt::format("removexattr: {{\n    const char *pathname = {}\n    const char *name = {}\n}}", nullable((const char*)arg1),
                           nullable((const char*)arg2));
    }
    case 198: {
        return fmt::format("lremovexattr: {{\n    const char *pathname = {}\n    const char *name = {}\n}}", nullable((const char*)arg1),
                           nullable((const char*)arg2));
    }
    case 199: {
        return fmt::format("fremovexattr: {{\n    int fd = 0x{:x}\n    const char *name = {}\n}}", (int)arg1, nullable((const char*)arg2));
    }
    case 200: {
        return fmt::format("tkill: {{\n    pid_t pid = {}\n    int sig = 0x{:x}\n}}", (void*)arg1, (int)arg2);
    }
    case 201: {
        return fmt::format("time: {{\n    __kernel_old_time_t *tloc = {}\n}}", (void*)arg1);
    }
    case 202: {
        return fmt::format("futex: {{\n    u32 *uaddr = {}\n    int op = 0x{:x}\n    u32 val = {}\n    const struct __kernel_timespec *utime = {}\n  "
                           "  u32 *uaddr2 = {}\n    u32 val3 = {}\n}}",
                           (void*)arg1, (int)arg2, (void*)arg3, (void*)arg4, (void*)arg5, (void*)arg6);
    }
    case 203: {
        return fmt::format("sched_setaffinity: {{\n    pid_t pid = {}\n    unsigned int len = 0x{:x}\n    unsigned long *user_mask_ptr = {}\n}}",
                           (void*)arg1, (int)arg2, (void*)arg3);
    }
    case 204: {
        return fmt::format("sched_getaffinity: {{\n    pid_t pid = {}\n    unsigned int len = 0x{:x}\n    unsigned long *user_mask_ptr = {}\n}}",
                           (void*)arg1, (int)arg2, (void*)arg3);
    }
    case 206: {
        return fmt::format("io_setup: {{\n    unsigned nr_events = {}\n    aio_context_t *ctxp = {}\n}}", (void*)arg1, (void*)arg2);
    }
    case 207: {
        return fmt::format("io_destroy: {{\n    aio_context_t ctx = {}\n}}", (void*)arg1);
    }
    case 208: {
        return fmt::format("io_getevents: {{\n    aio_context_t ctx_id = {}\n    long min_nr = 0x{:x}\n    long nr = 0x{:x}\n    struct io_event "
                           "*events = {}\n    struct __kernel_timespec *timeout = {}\n}}",
                           (void*)arg1, (u64)arg2, (u64)arg3, (void*)arg4, (void*)arg5);
    }
    case 209: {
        return fmt::format("io_submit: {{\n    aio_context_t ctx_id = {}\n    long nr = 0x{:x}\n    struct iocb **iocbpp = {}\n}}", (void*)arg1,
                           (u64)arg2, (void*)arg3);
    }
    case 210: {
        return fmt::format("io_cancel: {{\n    aio_context_t ctx_id = {}\n    struct iocb *iocb = {}\n    struct io_event *result = {}\n}}",
                           (void*)arg1, (void*)arg2, (void*)arg3);
    }
    case 213: {
        return fmt::format("epoll_create: {{\n    int size = 0x{:x}\n}}", (int)arg1);
    }
    case 216: {
        return fmt::format("remap_file_pages: {{\n    unsigned long start = 0x{:x}\n    unsigned long size = 0x{:x}\n    unsigned long prot = "
                           "0x{:x}\n    unsigned long pgoff = 0x{:x}\n    unsigned long flags = 0x{:x}\n}}",
                           (u64)arg1, (u64)arg2, (u64)arg3, (u64)arg4, (u64)arg5);
    }
    case 217: {
        return fmt::format(
            "getdents64: {{\n    unsigned int fd = 0x{:x}\n    struct linux_dirent64 *dirent = {}\n    unsigned int count = 0x{:x}\n}}", (int)arg1,
            (void*)arg2, (int)arg3);
    }
    case 218: {
        return fmt::format("set_tid_address: {{\n    int *tidptr = {}\n}}", (void*)arg1);
    }
    case 219: {
        return fmt::format("restart_syscall: {{}}");
    }
    case 220: {
        return fmt::format("semtimedop: {{\n    int semid = 0x{:x}\n    struct sembuf *tsops = {}\n    unsigned int nsops = 0x{:x}\n    const struct "
                           "__kernel_timespec *timeout = {}\n}}",
                           (int)arg1, (void*)arg2, (int)arg3, (void*)arg4);
    }
    case 221: {
        return fmt::format("fadvise64: {{\n    int fd = 0x{:x}\n    loff_t offset = 0x{:x}\n    size_t len = 0x{:x}\n    int advice = 0x{:x}\n}}",
                           (int)arg1, (u64)arg2, (u64)arg3, (int)arg4);
    }
    case 222: {
        return fmt::format("timer_create: {{\n    const clockid_t which_clock = {}\n    struct sigevent *timer_event_spec = {}\n    timer_t "
                           "*created_timer_id = {}\n}}",
                           (void*)arg1, (void*)arg2, (void*)arg3);
    }
    case 223: {
        return fmt::format("timer_settime: {{\n    timer_t timer_id = {}\n    int flags = 0x{:x}\n    const struct __kernel_itimerspec *new_setting "
                           "= {}\n    struct __kernel_itimerspec *old_setting = {}\n}}",
                           (void*)arg1, (int)arg2, (void*)arg3, (void*)arg4);
    }
    case 224: {
        return fmt::format("timer_gettime: {{\n    timer_t timer_id = {}\n    struct __kernel_itimerspec *setting = {}\n}}", (void*)arg1,
                           (void*)arg2);
    }
    case 225: {
        return fmt::format("timer_getoverrun: {{\n    timer_t timer_id = {}\n}}", (void*)arg1);
    }
    case 226: {
        return fmt::format("timer_delete: {{\n    timer_t timer_id = {}\n}}", (void*)arg1);
    }
    case 227: {
        return fmt::format("clock_settime: {{\n    const clockid_t which_clock = {}\n    const struct __kernel_timespec *tp = {}\n}}", (void*)arg1,
                           (void*)arg2);
    }
    case 228: {
        return fmt::format("clock_gettime: {{\n    const clockid_t which_clock = {}\n    struct __kernel_timespec *tp = {}\n}}", (void*)arg1,
                           (void*)arg2);
    }
    case 229: {
        return fmt::format("clock_getres: {{\n    const clockid_t which_clock = {}\n    struct __kernel_timespec *tp = {}\n}}", (void*)arg1,
                           (void*)arg2);
    }
    case 230: {
        return fmt::format("clock_nanosleep: {{\n    const clockid_t which_clock = {}\n    int flags = 0x{:x}\n    const struct __kernel_timespec "
                           "*rqtp = {}\n    struct __kernel_timespec *rmtp = {}\n}}",
                           (void*)arg1, (int)arg2, (void*)arg3, (void*)arg4);
    }
    case 231: {
        return fmt::format("exit_group: {{\n    int error_code = 0x{:x}\n}}", (int)arg1);
    }
    case 232: {
        return fmt::format(
            "epoll_wait: {{\n    int epfd = 0x{:x}\n    struct epoll_event *events = {}\n    int maxevents = 0x{:x}\n    int timeout = 0x{:x}\n}}",
            (int)arg1, (void*)arg2, (int)arg3, (int)arg4);
    }
    case 233: {
        return fmt::format("epoll_ctl: {{\n    int epfd = 0x{:x}\n    int op = 0x{:x}\n    int fd = 0x{:x}\n    struct epoll_event *event = {}\n}}",
                           (int)arg1, (int)arg2, (int)arg3, (void*)arg4);
    }
    case 234: {
        return fmt::format("tgkill: {{\n    pid_t tgid = {}\n    pid_t pid = {}\n    int sig = 0x{:x}\n}}", (void*)arg1, (void*)arg2, (int)arg3);
    }
    case 235: {
        return fmt::format("utimes: {{\n    char *filename = {}\n    struct __kernel_old_timeval *utimes = {}\n}}", nullable((const char*)arg1),
                           (void*)arg2);
    }
    case 237: {
        return fmt::format("mbind: {{\n    unsigned long start = 0x{:x}\n    unsigned long len = 0x{:x}\n    unsigned long mode = 0x{:x}\n    const "
                           "unsigned long *nmask = {}\n    unsigned long maxnode = 0x{:x}\n    unsigned int flags = 0x{:x}\n}}",
                           (u64)arg1, (u64)arg2, (u64)arg3, (void*)arg4, (u64)arg5, (int)arg6);
    }
    case 238: {
        return fmt::format("set_mempolicy: {{\n    int mode = 0x{:x}\n    const unsigned long *nmask = {}\n    unsigned long maxnode = 0x{:x}\n}}",
                           (int)arg1, (void*)arg2, (u64)arg3);
    }
    case 239: {
        return fmt::format("get_mempolicy: {{\n    int *policy = {}\n    unsigned long *nmask = {}\n    unsigned long maxnode = 0x{:x}\n    unsigned "
                           "long addr = 0x{:x}\n    unsigned long flags = 0x{:x}\n}}",
                           (void*)arg1, (void*)arg2, (u64)arg3, (u64)arg4, (u64)arg5);
    }
    case 240: {
        return fmt::format(
            "mq_open: {{\n    const char *u_name = {}\n    int oflag = 0x{:x}\n    umode_t mode = {}\n    struct mq_attr *u_attr = {}\n}}",
            nullable((const char*)arg1), (int)arg2, (void*)arg3, (void*)arg4);
    }
    case 241: {
        return fmt::format("mq_unlink: {{\n    const char *u_name = {}\n}}", nullable((const char*)arg1));
    }
    case 242: {
        return fmt::format("mq_timedsend: {{\n    mqd_t mqdes = {}\n    const char *u_msg_ptr = {}\n    size_t msg_len = 0x{:x}\n    unsigned int "
                           "msg_prio = 0x{:x}\n    const struct __kernel_timespec *u_abs_timeout = {}\n}}",
                           (void*)arg1, nullable((const char*)arg2), (u64)arg3, (int)arg4, (void*)arg5);
    }
    case 243: {
        return fmt::format("mq_timedreceive: {{\n    mqd_t mqdes = {}\n    char *u_msg_ptr = {}\n    size_t msg_len = 0x{:x}\n    unsigned int "
                           "*u_msg_prio = {}\n    const struct __kernel_timespec *u_abs_timeout = {}\n}}",
                           (void*)arg1, nullable((const char*)arg2), (u64)arg3, (void*)arg4, (void*)arg5);
    }
    case 244: {
        return fmt::format("mq_notify: {{\n    mqd_t mqdes = {}\n    const struct sigevent *u_notification = {}\n}}", (void*)arg1, (void*)arg2);
    }
    case 245: {
        return fmt::format("mq_getsetattr: {{\n    mqd_t mqdes = {}\n    const struct mq_attr *u_mqstat = {}\n    struct mq_attr *u_omqstat = {}\n}}",
                           (void*)arg1, (void*)arg2, (void*)arg3);
    }
    case 246: {
        return fmt::format("kexec_load: {{\n    unsigned long entry = 0x{:x}\n    unsigned long nr_segments = 0x{:x}\n    struct kexec_segment "
                           "*segments = {}\n    unsigned long flags = 0x{:x}\n}}",
                           (u64)arg1, (u64)arg2, (void*)arg3, (u64)arg4);
    }
    case 247: {
        return fmt::format("waitid: {{\n    int which = 0x{:x}\n    pid_t upid = {}\n    struct siginfo *infop = {}\n    int options = 0x{:x}\n    "
                           "struct rusage *ru = {}\n}}",
                           (int)arg1, (void*)arg2, (void*)arg3, (int)arg4, (void*)arg5);
    }
    case 248: {
        return fmt::format("add_key: {{\n    const char *_type = {}\n    const char *_description = {}\n    const void *_payload = {}\n    size_t "
                           "plen = 0x{:x}\n    key_serial_t ringid = {}\n}}",
                           nullable((const char*)arg1), nullable((const char*)arg2), (void*)arg3, (u64)arg4, (void*)arg5);
    }
    case 249: {
        return fmt::format("request_key: {{\n    const char *_type = {}\n    const char *_description = {}\n    const char *_callout_info = {}\n    "
                           "key_serial_t destringid = {}\n}}",
                           nullable((const char*)arg1), nullable((const char*)arg2), nullable((const char*)arg3), (void*)arg4);
    }
    case 250: {
        return fmt::format("keyctl: {{\n    int option = 0x{:x}\n    unsigned long arg2 = 0x{:x}\n    unsigned long arg3 = 0x{:x}\n    unsigned long "
                           "arg4 = 0x{:x}\n    unsigned long arg5 = 0x{:x}\n}}",
                           (int)arg1, (u64)arg2, (u64)arg3, (u64)arg4, (u64)arg5);
    }
    case 251: {
        return fmt::format("ioprio_set: {{\n    int which = 0x{:x}\n    int who = 0x{:x}\n    int ioprio = 0x{:x}\n}}", (int)arg1, (int)arg2,
                           (int)arg3);
    }
    case 252: {
        return fmt::format("ioprio_get: {{\n    int which = 0x{:x}\n    int who = 0x{:x}\n}}", (int)arg1, (int)arg2);
    }
    case 253: {
        return fmt::format("inotify_init: {{}}");
    }
    case 254: {
        return fmt::format("inotify_add_watch: {{\n    int fd = 0x{:x}\n    const char *pathname = {}\n    u32 mask = {}\n}}", (int)arg1,
                           nullable((const char*)arg2), (void*)arg3);
    }
    case 255: {
        return fmt::format("inotify_rm_watch: {{\n    int fd = 0x{:x}\n    __s32 wd = {}\n}}", (int)arg1, (void*)arg2);
    }
    case 256: {
        return fmt::format("migrate_pages: {{\n    pid_t pid = {}\n    unsigned long maxnode = 0x{:x}\n    const unsigned long *old_nodes = {}\n    "
                           "const unsigned long *new_nodes = {}\n}}",
                           (void*)arg1, (u64)arg2, (void*)arg3, (void*)arg4);
    }
    case 257: {
        return fmt::format("openat: {{\n    int dfd = 0x{:x}\n    const char *filename = {}\n    int flags = 0x{:x}\n    umode_t mode = {}\n}}",
                           (int)arg1, nullable((const char*)arg2), (int)arg3, (void*)arg4);
    }
    case 258: {
        return fmt::format("mkdirat: {{\n    int dfd = 0x{:x}\n    const char *pathname = {}\n    umode_t mode = {}\n}}", (int)arg1,
                           nullable((const char*)arg2), (void*)arg3);
    }
    case 259: {
        return fmt::format(
            "mknodat: {{\n    int dfd = 0x{:x}\n    const char *filename = {}\n    umode_t mode = {}\n    unsigned int dev = 0x{:x}\n}}", (int)arg1,
            nullable((const char*)arg2), (void*)arg3, (int)arg4);
    }
    case 260: {
        return fmt::format(
            "fchownat: {{\n    int dfd = 0x{:x}\n    const char *filename = {}\n    uid_t user = {}\n    gid_t group = {}\n    int flag = 0x{:x}\n}}",
            (int)arg1, nullable((const char*)arg2), (void*)arg3, (void*)arg4, (int)arg5);
    }
    case 261: {
        return fmt::format("futimesat: {{\n    int dfd = 0x{:x}\n    const char *filename = {}\n    struct __kernel_old_timeval *utimes = {}\n}}",
                           (int)arg1, nullable((const char*)arg2), (void*)arg3);
    }
    case 262: {
        return fmt::format(
            "newfstatat: {{\n    int dfd = 0x{:x}\n    const char *filename = {}\n    struct stat *statbuf = {}\n    int flag = 0x{:x}\n}}",
            (int)arg1, nullable((const char*)arg2), (void*)arg3, (int)arg4);
    }
    case 263: {
        return fmt::format("unlinkat: {{\n    int dfd = 0x{:x}\n    const char *pathname = {}\n    int flag = 0x{:x}\n}}", (int)arg1,
                           nullable((const char*)arg2), (int)arg3);
    }
    case 264: {
        return fmt::format(
            "renameat: {{\n    int olddfd = 0x{:x}\n    const char *oldname = {}\n    int newdfd = 0x{:x}\n    const char *newname = {}\n}}",
            (int)arg1, nullable((const char*)arg2), (int)arg3, nullable((const char*)arg4));
    }
    case 265: {
        return fmt::format("linkat: {{\n    int olddfd = 0x{:x}\n    const char *oldname = {}\n    int newdfd = 0x{:x}\n    const char *newname = "
                           "{}\n    int flags = 0x{:x}\n}}",
                           (int)arg1, nullable((const char*)arg2), (int)arg3, nullable((const char*)arg4), (int)arg5);
    }
    case 266: {
        return fmt::format("symlinkat: {{\n    const char *oldname = {}\n    int newdfd = 0x{:x}\n    const char *newname = {}\n}}",
                           nullable((const char*)arg1), (int)arg2, nullable((const char*)arg3));
    }
    case 267: {
        return fmt::format("readlinkat: {{\n    int dfd = 0x{:x}\n    const char *pathname = {}\n    char *buf = {}\n    int bufsiz = 0x{:x}\n}}",
                           (int)arg1, nullable((const char*)arg2), nullable((const char*)arg3), (int)arg4);
    }
    case 268: {
        return fmt::format("fchmodat: {{\n    int dfd = 0x{:x}\n    const char *filename = {}\n    umode_t mode = {}\n}}", (int)arg1,
                           nullable((const char*)arg2), (void*)arg3);
    }
    case 269: {
        return fmt::format("faccessat: {{\n    int dfd = 0x{:x}\n    const char *filename = {}\n    int mode = 0x{:x}\n}}", (int)arg1,
                           nullable((const char*)arg2), (int)arg3);
    }
    case 270: {
        return fmt::format("pselect6: {{\n    int n = 0x{:x}\n    fd_set *inp = {}\n    fd_set *outp = {}\n    fd_set *exp = {}\n    struct "
                           "__kernel_timespec *tsp = {}\n    void *sig = {}\n}}",
                           (int)arg1, (void*)arg2, (void*)arg3, (void*)arg4, (void*)arg5, (void*)arg6);
    }
    case 271: {
        return fmt::format("ppoll: {{\n    struct pollfd *ufds = {}\n    unsigned int nfds = 0x{:x}\n    struct __kernel_timespec *tsp = {}\n    "
                           "const sigset_t *sigmask = {}\n    size_t sigsetsize = 0x{:x}\n}}",
                           (void*)arg1, (int)arg2, (void*)arg3, (void*)arg4, (u64)arg5);
    }
    case 272: {
        return fmt::format("unshare: {{\n    unsigned long unshare_flags = 0x{:x}\n}}", (u64)arg1);
    }
    case 273: {
        return fmt::format("set_robust_list: {{\n    struct robust_list_head *head = {}\n    size_t len = 0x{:x}\n}}", (void*)arg1, (u64)arg2);
    }
    case 274: {
        return fmt::format("get_robust_list: {{\n    int pid = 0x{:x}\n    struct robust_list_head **head_ptr = {}\n    size_t *len_ptr = {}\n}}",
                           (int)arg1, (void*)arg2, (void*)arg3);
    }
    case 275: {
        return fmt::format("splice: {{\n    int fd_in = 0x{:x}\n    loff_t *off_in = {}\n    int fd_out = 0x{:x}\n    loff_t *off_out = {}\n    "
                           "size_t len = 0x{:x}\n    unsigned int flags = 0x{:x}\n}}",
                           (int)arg1, (void*)arg2, (int)arg3, (void*)arg4, (u64)arg5, (int)arg6);
    }
    case 276: {
        return fmt::format("tee: {{\n    int fdin = 0x{:x}\n    int fdout = 0x{:x}\n    size_t len = 0x{:x}\n    unsigned int flags = 0x{:x}\n}}",
                           (int)arg1, (int)arg2, (u64)arg3, (int)arg4);
    }
    case 277: {
        return fmt::format(
            "sync_file_range: {{\n    int fd = 0x{:x}\n    loff_t offset = 0x{:x}\n    loff_t nbytes = 0x{:x}\n    unsigned int flags = 0x{:x}\n}}",
            (int)arg1, (u64)arg2, (u64)arg3, (int)arg4);
    }
    case 278: {
        return fmt::format("vmsplice: {{\n    int fd = 0x{:x}\n    const struct iovec *uiov = {}\n    unsigned long nr_segs = 0x{:x}\n    unsigned "
                           "int flags = 0x{:x}\n}}",
                           (int)arg1, (void*)arg2, (u64)arg3, (int)arg4);
    }
    case 279: {
        return fmt::format("move_pages: {{\n    pid_t pid = {}\n    unsigned long nr_pages = 0x{:x}\n    const void **pages = {}\n    const int "
                           "*nodes = {}\n    int *status = {}\n    int flags = 0x{:x}\n}}",
                           (void*)arg1, (u64)arg2, (void*)arg3, (void*)arg4, (void*)arg5, (int)arg6);
    }
    case 280: {
        return fmt::format("utimensat: {{\n    int dfd = 0x{:x}\n    const char *filename = {}\n    struct __kernel_timespec *utimes = {}\n    int "
                           "flags = 0x{:x}\n}}",
                           (int)arg1, nullable((const char*)arg2), (void*)arg3, (int)arg4);
    }
    case 281: {
        return fmt::format("epoll_pwait: {{\n    int epfd = 0x{:x}\n    struct epoll_event *events = {}\n    int maxevents = 0x{:x}\n    int timeout "
                           "= 0x{:x}\n    const sigset_t *sigmask = {}\n    size_t sigsetsize = 0x{:x}\n}}",
                           (int)arg1, (void*)arg2, (int)arg3, (int)arg4, (void*)arg5, (u64)arg6);
    }
    case 282: {
        return fmt::format("signalfd: {{\n    int ufd = 0x{:x}\n    sigset_t *user_mask = {}\n    size_t sizemask = 0x{:x}\n}}", (int)arg1,
                           (void*)arg2, (u64)arg3);
    }
    case 283: {
        return fmt::format("timerfd_create: {{\n    int clockid = 0x{:x}\n    int flags = 0x{:x}\n}}", (int)arg1, (int)arg2);
    }
    case 284: {
        return fmt::format("eventfd: {{\n    unsigned int count = 0x{:x}\n}}", (int)arg1);
    }
    case 285: {
        return fmt::format("fallocate: {{\n    int fd = 0x{:x}\n    int mode = 0x{:x}\n    loff_t offset = 0x{:x}\n    loff_t len = 0x{:x}\n}}",
                           (int)arg1, (int)arg2, (u64)arg3, (u64)arg4);
    }
    case 286: {
        return fmt::format("timerfd_settime: {{\n    int ufd = 0x{:x}\n    int flags = 0x{:x}\n    const struct __kernel_itimerspec *utmr = {}\n    "
                           "struct __kernel_itimerspec *otmr = {}\n}}",
                           (int)arg1, (int)arg2, (void*)arg3, (void*)arg4);
    }
    case 287: {
        return fmt::format("timerfd_gettime: {{\n    int ufd = 0x{:x}\n    struct __kernel_itimerspec *otmr = {}\n}}", (int)arg1, (void*)arg2);
    }
    case 288: {
        return fmt::format(
            "accept4: {{\n    int fd = 0x{:x}\n    struct sockaddr *upeer_sockaddr = {}\n    int *upeer_addrlen = {}\n    int flags = 0x{:x}\n}}",
            (int)arg1, (void*)arg2, (void*)arg3, (int)arg4);
    }
    case 289: {
        return fmt::format(
            "signalfd4: {{\n    int ufd = 0x{:x}\n    sigset_t *user_mask = {}\n    size_t sizemask = 0x{:x}\n    int flags = 0x{:x}\n}}", (int)arg1,
            (void*)arg2, (u64)arg3, (int)arg4);
    }
    case 290: {
        return fmt::format("eventfd2: {{\n    unsigned int count = 0x{:x}\n    int flags = 0x{:x}\n}}", (int)arg1, (int)arg2);
    }
    case 291: {
        return fmt::format("epoll_create1: {{\n    int flags = 0x{:x}\n}}", (int)arg1);
    }
    case 292: {
        return fmt::format("dup3: {{\n    unsigned int oldfd = 0x{:x}\n    unsigned int newfd = 0x{:x}\n    int flags = 0x{:x}\n}}", (int)arg1,
                           (int)arg2, (int)arg3);
    }
    case 293: {
        return fmt::format("pipe2: {{\n    int *fildes = {}\n    int flags = 0x{:x}\n}}", (void*)arg1, (int)arg2);
    }
    case 294: {
        return fmt::format("inotify_init1: {{\n    int flags = 0x{:x}\n}}", (int)arg1);
    }
    case 295: {
        return fmt::format("preadv: {{\n    unsigned long fd = 0x{:x}\n    const struct iovec *vec = {}\n    unsigned long vlen = 0x{:x}\n    "
                           "unsigned long pos_l = 0x{:x}\n    unsigned long pos_h = 0x{:x}\n}}",
                           (u64)arg1, (void*)arg2, (u64)arg3, (u64)arg4, (u64)arg5);
    }
    case 296: {
        return fmt::format("pwritev: {{\n    unsigned long fd = 0x{:x}\n    const struct iovec *vec = {}\n    unsigned long vlen = 0x{:x}\n    "
                           "unsigned long pos_l = 0x{:x}\n    unsigned long pos_h = 0x{:x}\n}}",
                           (u64)arg1, (void*)arg2, (u64)arg3, (u64)arg4, (u64)arg5);
    }
    case 297: {
        return fmt::format("rt_tgsigqueueinfo: {{\n    pid_t tgid = {}\n    pid_t pid = {}\n    int sig = 0x{:x}\n    siginfo_t *uinfo = {}\n}}",
                           (void*)arg1, (void*)arg2, (int)arg3, (void*)arg4);
    }
    case 298: {
        return fmt::format("perf_event_open: {{\n    struct perf_event_attr *attr_uptr = {}\n    pid_t pid = {}\n    int cpu = 0x{:x}\n    int "
                           "group_fd = 0x{:x}\n    unsigned long flags = 0x{:x}\n}}",
                           (void*)arg1, (void*)arg2, (int)arg3, (int)arg4, (u64)arg5);
    }
    case 299: {
        return fmt::format("recvmmsg: {{\n    int fd = 0x{:x}\n    struct mmsghdr *mmsg = {}\n    unsigned int vlen = 0x{:x}\n    unsigned int flags "
                           "= 0x{:x}\n    struct __kernel_timespec *timeout = {}\n}}",
                           (int)arg1, (void*)arg2, (int)arg3, (int)arg4, (void*)arg5);
    }
    case 300: {
        return fmt::format("fanotify_init: {{\n    unsigned int flags = 0x{:x}\n    unsigned int event_f_flags = 0x{:x}\n}}", (int)arg1, (int)arg2);
    }
    case 301: {
        return fmt::format("fanotify_mark: {{\n    int fanotify_fd = 0x{:x}\n    unsigned int flags = 0x{:x}\n    __u64 mask = {}\n    int dfd = "
                           "0x{:x}\n    const char *pathname = {}\n}}",
                           (int)arg1, (int)arg2, (void*)arg3, (int)arg4, nullable((const char*)arg5));
    }
    case 302: {
        return fmt::format("prlimit64: {{\n    pid_t pid = {}\n    unsigned int resource = 0x{:x}\n    const struct rlimit64 *new_rlim = {}\n    "
                           "struct rlimit64 *old_rlim = {}\n}}",
                           (void*)arg1, (int)arg2, (void*)arg3, (void*)arg4);
    }
    case 303: {
        return fmt::format("name_to_handle_at: {{\n    int dfd = 0x{:x}\n    const char *name = {}\n    struct file_handle *handle = {}\n    int "
                           "*mnt_id = {}\n    int flag = 0x{:x}\n}}",
                           (int)arg1, nullable((const char*)arg2), (void*)arg3, (void*)arg4, (int)arg5);
    }
    case 304: {
        return fmt::format("open_by_handle_at: {{\n    int mountdirfd = 0x{:x}\n    struct file_handle *handle = {}\n    int flags = 0x{:x}\n}}",
                           (int)arg1, (void*)arg2, (int)arg3);
    }
    case 305: {
        return fmt::format("clock_adjtime: {{\n    const clockid_t which_clock = {}\n    struct __kernel_timex *utx = {}\n}}", (void*)arg1,
                           (void*)arg2);
    }
    case 306: {
        return fmt::format("syncfs: {{\n    int fd = 0x{:x}\n}}", (int)arg1);
    }
    case 307: {
        return fmt::format(
            "sendmmsg: {{\n    int fd = 0x{:x}\n    struct mmsghdr *mmsg = {}\n    unsigned int vlen = 0x{:x}\n    unsigned int flags = 0x{:x}\n}}",
            (int)arg1, (void*)arg2, (int)arg3, (int)arg4);
    }
    case 308: {
        return fmt::format("setns: {{\n    int fd = 0x{:x}\n    int flags = 0x{:x}\n}}", (int)arg1, (int)arg2);
    }
    case 309: {
        return fmt::format("getcpu: {{\n    unsigned *cpup = {}\n    unsigned *nodep = {}\n    struct getcpu_cache *unused = {}\n}}", (void*)arg1,
                           (void*)arg2, (void*)arg3);
    }
    case 310: {
        return fmt::format("process_vm_readv: {{\n    pid_t pid = {}\n    const struct iovec *lvec = {}\n    unsigned long liovcnt = 0x{:x}\n    "
                           "const struct iovec *rvec = {}\n    unsigned long riovcnt = 0x{:x}\n    unsigned long flags = 0x{:x}\n}}",
                           (void*)arg1, (void*)arg2, (u64)arg3, (void*)arg4, (u64)arg5, (u64)arg6);
    }
    case 311: {
        return fmt::format("process_vm_writev: {{\n    pid_t pid = {}\n    const struct iovec *lvec = {}\n    unsigned long liovcnt = 0x{:x}\n    "
                           "const struct iovec *rvec = {}\n    unsigned long riovcnt = 0x{:x}\n    unsigned long flags = 0x{:x}\n}}",
                           (void*)arg1, (void*)arg2, (u64)arg3, (void*)arg4, (u64)arg5, (u64)arg6);
    }
    case 312: {
        return fmt::format("kcmp: {{\n    pid_t pid1 = {}\n    pid_t pid2 = {}\n    int type = 0x{:x}\n    unsigned long idx1 = 0x{:x}\n    unsigned "
                           "long idx2 = 0x{:x}\n}}",
                           (void*)arg1, (void*)arg2, (int)arg3, (u64)arg4, (u64)arg5);
    }
    case 313: {
        return fmt::format("finit_module: {{\n    int fd = 0x{:x}\n    const char *uargs = {}\n    int flags = 0x{:x}\n}}", (int)arg1,
                           nullable((const char*)arg2), (int)arg3);
    }
    case 314: {
        return fmt::format("sched_setattr: {{\n    pid_t pid = {}\n    struct sched_attr *uattr = {}\n    unsigned int flags = 0x{:x}\n}}",
                           (void*)arg1, (void*)arg2, (int)arg3);
    }
    case 315: {
        return fmt::format("sched_getattr: {{\n    pid_t pid = {}\n    struct sched_attr *uattr = {}\n    unsigned int usize = 0x{:x}\n    unsigned "
                           "int flags = 0x{:x}\n}}",
                           (void*)arg1, (void*)arg2, (int)arg3, (int)arg4);
    }
    case 316: {
        return fmt::format("renameat2: {{\n    int olddfd = 0x{:x}\n    const char *oldname = {}\n    int newdfd = 0x{:x}\n    const char *newname = "
                           "{}\n    unsigned int flags = 0x{:x}\n}}",
                           (int)arg1, nullable((const char*)arg2), (int)arg3, nullable((const char*)arg4), (int)arg5);
    }
    case 317: {
        return fmt::format("seccomp: {{\n    unsigned int op = 0x{:x}\n    unsigned int flags = 0x{:x}\n    void *uargs = {}\n}}", (int)arg1,
                           (int)arg2, (void*)arg3);
    }
    case 318: {
        return fmt::format("getrandom: {{\n    char *ubuf = {}\n    size_t len = 0x{:x}\n    unsigned int flags = 0x{:x}\n}}",
                           nullable((const char*)arg1), (u64)arg2, (int)arg3);
    }
    case 319: {
        return fmt::format("memfd_create: {{\n    const char *uname = {}\n    unsigned int flags = 0x{:x}\n}}", nullable((const char*)arg1),
                           (int)arg2);
    }
    case 320: {
        return fmt::format("kexec_file_load: {{\n    int kernel_fd = 0x{:x}\n    int initrd_fd = 0x{:x}\n    unsigned long cmdline_len = 0x{:x}\n    "
                           "const char *cmdline_ptr = {}\n    unsigned long flags = 0x{:x}\n}}",
                           (int)arg1, (int)arg2, (u64)arg3, nullable((const char*)arg4), (u64)arg5);
    }
    case 321: {
        return fmt::format("bpf: {{\n    int cmd = 0x{:x}\n    union bpf_attr *uattr = {}\n    unsigned int size = 0x{:x}\n}}", (int)arg1,
                           (void*)arg2, (int)arg3);
    }
    case 322: {
        return fmt::format("execveat: {{\n    int fd = 0x{:x}\n    const char *filename = {}\n    const char *const *argv = {}\n    const char "
                           "*const *envp = {}\n    int flags = 0x{:x}\n}}",
                           (int)arg1, nullable((const char*)arg2), (void*)arg3, (void*)arg4, (int)arg5);
    }
    case 323: {
        return fmt::format("userfaultfd: {{\n    int flags = 0x{:x}\n}}", (int)arg1);
    }
    case 324: {
        return fmt::format("membarrier: {{\n    int cmd = 0x{:x}\n    unsigned int flags = 0x{:x}\n    int cpu_id = 0x{:x}\n}}", (int)arg1, (int)arg2,
                           (int)arg3);
    }
    case 325: {
        return fmt::format("mlock2: {{\n    unsigned long start = 0x{:x}\n    size_t len = 0x{:x}\n    int flags = 0x{:x}\n}}", (u64)arg1, (u64)arg2,
                           (int)arg3);
    }
    case 326: {
        return fmt::format("copy_file_range: {{\n    int fd_in = 0x{:x}\n    loff_t *off_in = {}\n    int fd_out = 0x{:x}\n    loff_t *off_out = "
                           "{}\n    size_t len = 0x{:x}\n    unsigned int flags = 0x{:x}\n}}",
                           (int)arg1, (void*)arg2, (int)arg3, (void*)arg4, (u64)arg5, (int)arg6);
    }
    case 327: {
        return fmt::format("preadv2: {{\n    unsigned long fd = 0x{:x}\n    const struct iovec *vec = {}\n    unsigned long vlen = 0x{:x}\n    "
                           "unsigned long pos_l = 0x{:x}\n    unsigned long pos_h = 0x{:x}\n    rwf_t flags = {}\n}}",
                           (u64)arg1, (void*)arg2, (u64)arg3, (u64)arg4, (u64)arg5, (void*)arg6);
    }
    case 328: {
        return fmt::format("pwritev2: {{\n    unsigned long fd = 0x{:x}\n    const struct iovec *vec = {}\n    unsigned long vlen = 0x{:x}\n    "
                           "unsigned long pos_l = 0x{:x}\n    unsigned long pos_h = 0x{:x}\n    rwf_t flags = {}\n}}",
                           (u64)arg1, (void*)arg2, (u64)arg3, (u64)arg4, (u64)arg5, (void*)arg6);
    }
    case 329: {
        return fmt::format("pkey_mprotect: {{\n    unsigned long start = 0x{:x}\n    size_t len = 0x{:x}\n    unsigned long prot = 0x{:x}\n    int "
                           "pkey = 0x{:x}\n}}",
                           (u64)arg1, (u64)arg2, (u64)arg3, (int)arg4);
    }
    case 330: {
        return fmt::format("pkey_alloc: {{\n    unsigned long flags = 0x{:x}\n    unsigned long init_val = 0x{:x}\n}}", (u64)arg1, (u64)arg2);
    }
    case 331: {
        return fmt::format("pkey_free: {{\n    int pkey = 0x{:x}\n}}", (int)arg1);
    }
    case 332: {
        return fmt::format("statx: {{\n    int dfd = 0x{:x}\n    const char *filename = {}\n    unsigned flags = {}\n    unsigned int mask = "
                           "0x{:x}\n    struct statx *buffer = {}\n}}",
                           (int)arg1, nullable((const char*)arg2), (void*)arg3, (int)arg4, (void*)arg5);
    }
    case 333: {
        return fmt::format("io_pgetevents: {{\n    aio_context_t ctx_id = {}\n    long min_nr = 0x{:x}\n    long nr = 0x{:x}\n    struct io_event "
                           "*events = {}\n    struct __kernel_timespec *timeout = {}\n    const struct __aio_sigset *usig = {}\n}}",
                           (void*)arg1, (u64)arg2, (u64)arg3, (void*)arg4, (void*)arg5, (void*)arg6);
    }
    case 334: {
        return fmt::format("rseq: {{\n    struct rseq *rseq = {}\n    u32 rseq_len = {}\n    int flags = 0x{:x}\n    u32 sig = {}\n}}", (void*)arg1,
                           (void*)arg2, (int)arg3, (void*)arg4);
    }
    case 424: {
        return fmt::format(
            "pidfd_send_signal: {{\n    int pidfd = 0x{:x}\n    int sig = 0x{:x}\n    siginfo_t *info = {}\n    unsigned int flags = 0x{:x}\n}}",
            (int)arg1, (int)arg2, (void*)arg3, (int)arg4);
    }
    case 425: {
        return fmt::format("io_uring_setup: {{\n    u32 entries = {}\n    struct io_uring_params *params = {}\n}}", (void*)arg1, (void*)arg2);
    }
    case 426: {
        return fmt::format("io_uring_enter: {{\n    unsigned int fd = 0x{:x}\n    u32 to_submit = {}\n    u32 min_complete = {}\n    u32 flags = "
                           "{}\n    const void *argp = {}\n    size_t argsz = 0x{:x}\n}}",
                           (int)arg1, (void*)arg2, (void*)arg3, (void*)arg4, (void*)arg5, (u64)arg6);
    }
    case 427: {
        return fmt::format("io_uring_register: {{\n    unsigned int fd = 0x{:x}\n    unsigned int opcode = 0x{:x}\n    void *arg = {}\n    unsigned "
                           "int nr_args = 0x{:x}\n}}",
                           (int)arg1, (int)arg2, (void*)arg3, (int)arg4);
    }
    case 428: {
        return fmt::format("open_tree: {{\n    int dfd = 0x{:x}\n    const char *filename = {}\n    unsigned flags = {}\n}}", (int)arg1,
                           nullable((const char*)arg2), (void*)arg3);
    }
    case 429: {
        return fmt::format("move_mount: {{\n    int from_dfd = 0x{:x}\n    const char *from_pathname = {}\n    int to_dfd = 0x{:x}\n    const char "
                           "*to_pathname = {}\n    unsigned int flags = 0x{:x}\n}}",
                           (int)arg1, nullable((const char*)arg2), (int)arg3, nullable((const char*)arg4), (int)arg5);
    }
    case 430: {
        return fmt::format("fsopen: {{\n    const char *_fs_name = {}\n    unsigned int flags = 0x{:x}\n}}", nullable((const char*)arg1), (int)arg2);
    }
    case 431: {
        return fmt::format("fsconfig: {{\n    int fd = 0x{:x}\n    unsigned int cmd = 0x{:x}\n    const char *_key = {}\n    const void *_value = "
                           "{}\n    int aux = 0x{:x}\n}}",
                           (int)arg1, (int)arg2, nullable((const char*)arg3), (void*)arg4, (int)arg5);
    }
    case 432: {
        return fmt::format("fsmount: {{\n    int fs_fd = 0x{:x}\n    unsigned int flags = 0x{:x}\n    unsigned int attr_flags = 0x{:x}\n}}",
                           (int)arg1, (int)arg2, (int)arg3);
    }
    case 433: {
        return fmt::format("fspick: {{\n    int dfd = 0x{:x}\n    const char *path = {}\n    unsigned int flags = 0x{:x}\n}}", (int)arg1,
                           nullable((const char*)arg2), (int)arg3);
    }
    case 434: {
        return fmt::format("pidfd_open: {{\n    pid_t pid = {}\n    unsigned int flags = 0x{:x}\n}}", (void*)arg1, (int)arg2);
    }
    case 435: {
        return fmt::format("clone3: {{\n    struct clone_args *uargs = {}\n    size_t size = 0x{:x}\n}}", (void*)arg1, (u64)arg2);
    }
    case 436: {
        return fmt::format("close_range: {{\n    unsigned int fd = 0x{:x}\n    unsigned int max_fd = 0x{:x}\n    unsigned int flags = 0x{:x}\n}}",
                           (int)arg1, (int)arg2, (int)arg3);
    }
    case 437: {
        return fmt::format(
            "openat2: {{\n    int dfd = 0x{:x}\n    const char *filename = {}\n    struct open_how *how = {}\n    size_t usize = 0x{:x}\n}}",
            (int)arg1, nullable((const char*)arg2), (void*)arg3, (u64)arg4);
    }
    case 438: {
        return fmt::format("pidfd_getfd: {{\n    int pidfd = 0x{:x}\n    int fd = 0x{:x}\n    unsigned int flags = 0x{:x}\n}}", (int)arg1, (int)arg2,
                           (int)arg3);
    }
    case 439: {
        return fmt::format("faccessat2: {{\n    int dfd = 0x{:x}\n    const char *filename = {}\n    int mode = 0x{:x}\n    int flags = 0x{:x}\n}}",
                           (int)arg1, nullable((const char*)arg2), (int)arg3, (int)arg4);
    }
    case 440: {
        return fmt::format("process_madvise: {{\n    int pidfd = 0x{:x}\n    const struct iovec *vec = {}\n    size_t vlen = 0x{:x}\n    int "
                           "behavior = 0x{:x}\n    unsigned int flags = 0x{:x}\n}}",
                           (int)arg1, (void*)arg2, (u64)arg3, (int)arg4, (int)arg5);
    }
    case 441: {
        return fmt::format("epoll_pwait2: {{\n    int epfd = 0x{:x}\n    struct epoll_event *events = {}\n    int maxevents = 0x{:x}\n    const "
                           "struct __kernel_timespec *timeout = {}\n    const sigset_t *sigmask = {}\n    size_t sigsetsize = 0x{:x}\n}}",
                           (int)arg1, (void*)arg2, (int)arg3, (void*)arg4, (void*)arg5, (u64)arg6);
    }
    case 442: {
        return fmt::format("mount_setattr: {{\n    int dfd = 0x{:x}\n    const char *path = {}\n    unsigned int flags = 0x{:x}\n    struct "
                           "mount_attr *uattr = {}\n    size_t usize = 0x{:x}\n}}",
                           (int)arg1, nullable((const char*)arg2), (int)arg3, (void*)arg4, (u64)arg5);
    }
    case 443: {
        return fmt::format("quotactl_fd: {{\n    unsigned int fd = 0x{:x}\n    unsigned int cmd = 0x{:x}\n    qid_t id = {}\n    void *addr = {}\n}}",
                           (int)arg1, (int)arg2, (void*)arg3, (void*)arg4);
    }
    case 444: {
        return fmt::format("landlock_create_ruleset: {{\n    const struct landlock_ruleset_attr *const attr = {}\n    const size_t size = {}\n    "
                           "const __u32 flags = {}\n}}",
                           (void*)arg1, (void*)arg2, (void*)arg3);
    }
    case 445: {
        return fmt::format("landlock_add_rule: {{\n    const int ruleset_fd = {}\n    const enum landlock_rule_type rule_type = {}\n    const void "
                           "*const rule_attr = {}\n    const __u32 flags = {}\n}}",
                           (void*)arg1, (void*)arg2, (void*)arg3, (void*)arg4);
    }
    case 446: {
        return fmt::format("landlock_restrict_self: {{\n    const int ruleset_fd = {}\n    const __u32 flags = {}\n}}", (void*)arg1, (void*)arg2);
    }
    case 447: {
        return fmt::format("memfd_secret: {{\n    unsigned int flags = 0x{:x}\n}}", (int)arg1);
    }
    case 448: {
        return fmt::format("process_mrelease: {{\n    int pidfd = 0x{:x}\n    unsigned int flags = 0x{:x}\n}}", (int)arg1, (int)arg2);
    }
    case 449: {
        return fmt::format("futex_waitv: {{\n    struct futex_waitv *waiters = {}\n    unsigned int nr_futexes = 0x{:x}\n    unsigned int flags = "
                           "0x{:x}\n    struct __kernel_timespec *timeout = {}\n    clockid_t clockid = {}\n}}",
                           (void*)arg1, (int)arg2, (int)arg3, (void*)arg4, (void*)arg5);
    }
    case 450: {
        return fmt::format("set_mempolicy_home_node: {{\n    unsigned long start = 0x{:x}\n    unsigned long len = 0x{:x}\n    unsigned long "
                           "home_node = 0x{:x}\n    unsigned long flags = 0x{:x}\n}}",
                           (u64)arg1, (u64)arg2, (u64)arg3, (u64)arg4);
    }
    default:
        ERROR("Unknown syscall: %d", syscall_no);
        return "";
    }
}

std::string trace32(int syscall_no, u64 arg1, u64 arg2, u64 arg3, u64 arg4, u64 arg5, u64 arg6) {
    switch (syscall_no) {
    case 0: {
        return fmt::format("restart_syscall: {{}}");
    }
    case 1: {
        return fmt::format("exit: {{\n    int error_code = 0x{:x}\n}}", (int)arg1);
    }
    case 2: {
        return fmt::format("fork: {{}}");
    }
    case 3: {
        return fmt::format("read: {{\n    unsigned int fd = 0x{:x}\n    char *buf = {}\n    size_t count = 0x{:x}\n}}", (int)arg1,
                           nullable((const char*)arg2), (u64)arg3);
    }
    case 4: {
        return fmt::format("write: {{\n    unsigned int fd = 0x{:x}\n    const char *buf = {}\n    size_t count = 0x{:x}\n}}", (int)arg1,
                           nullable((const char*)arg2), (u64)arg3);
    }
    case 5: {
        return fmt::format("open: {{\n    const char *filename = {}\n    int flags = 0x{:x}\n    umode_t mode = {}\n}}", nullable((const char*)arg1),
                           (int)arg2, (void*)arg3);
    }
    case 6: {
        return fmt::format("close: {{\n    unsigned int fd = 0x{:x}\n}}", (int)arg1);
    }
    case 7: {
        return fmt::format("waitpid: {{\n    pid_t pid = {}\n    int *stat_addr = {}\n    int options = 0x{:x}\n}}", (void*)arg1, (void*)arg2,
                           (int)arg3);
    }
    case 8: {
        return fmt::format("creat: {{\n    const char *pathname = {}\n    umode_t mode = {}\n}}", nullable((const char*)arg1), (void*)arg2);
    }
    case 9: {
        return fmt::format("link: {{\n    const char *oldname = {}\n    const char *newname = {}\n}}", nullable((const char*)arg1),
                           nullable((const char*)arg2));
    }
    case 10: {
        return fmt::format("unlink: {{\n    const char *pathname = {}\n}}", nullable((const char*)arg1));
    }
    case 11: {
        return fmt::format("execve: {{\n    const char *filename = {}\n    const char *const *argv = {}\n    const char *const *envp = {}\n}}",
                           nullable((const char*)arg1), (void*)arg2, (void*)arg3);
    }
    case 12: {
        return fmt::format("chdir: {{\n    const char *filename = {}\n}}", nullable((const char*)arg1));
    }
    case 13: {
        return fmt::format("time: {{\n    old_time32_t *tloc = {}\n}}", (void*)arg1);
    }
    case 14: {
        return fmt::format("mknod: {{\n    const char *filename = {}\n    umode_t mode = {}\n    unsigned dev = {}\n}}", nullable((const char*)arg1),
                           (void*)arg2, (void*)arg3);
    }
    case 15: {
        return fmt::format("chmod: {{\n    const char *filename = {}\n    umode_t mode = {}\n}}", nullable((const char*)arg1), (void*)arg2);
    }
    case 16: {
        return fmt::format("lchown16: {{\n    const char *filename = {}\n    old_uid_t user = {}\n    old_gid_t group = {}\n}}",
                           nullable((const char*)arg1), (void*)arg2, (void*)arg3);
    }
    case 18: {
        return fmt::format("stat: {{\n    const char *filename = {}\n    struct __old_kernel_stat *statbuf = {}\n}}", nullable((const char*)arg1),
                           (void*)arg2);
    }
    case 19: {
        return fmt::format("lseek: {{\n    unsigned int fd = 0x{:x}\n    off_t offset = 0x{:x}\n    unsigned int whence = 0x{:x}\n}}", (int)arg1,
                           (u64)arg2, (int)arg3);
    }
    case 20: {
        return fmt::format("getpid: {{}}");
    }
    case 21: {
        return fmt::format("mount: {{\n    char *dev_name = {}\n    char *dir_name = {}\n    char *type = {}\n    unsigned long flags = 0x{:x}\n    "
                           "void *data = {}\n}}",
                           nullable((const char*)arg1), nullable((const char*)arg2), nullable((const char*)arg3), (u64)arg4, (void*)arg5);
    }
    case 22: {
        return fmt::format("oldumount: {{\n    char *name = {}\n}}", nullable((const char*)arg1));
    }
    case 23: {
        return fmt::format("setuid16: {{\n    old_uid_t uid = {}\n}}", (void*)arg1);
    }
    case 24: {
        return fmt::format("getuid16: {{}}");
    }
    case 25: {
        return fmt::format("stime: {{\n    old_time32_t *tptr = {}\n}}", (void*)arg1);
    }
    case 26: {
        return fmt::format(
            "ptrace: {{\n    long request = 0x{:x}\n    long pid = 0x{:x}\n    unsigned long addr = 0x{:x}\n    unsigned long data = 0x{:x}\n}}",
            (u64)arg1, (u64)arg2, (u64)arg3, (u64)arg4);
    }
    case 27: {
        return fmt::format("alarm: {{\n    unsigned int seconds = 0x{:x}\n}}", (int)arg1);
    }
    case 28: {
        return fmt::format("fstat: {{\n    unsigned int fd = 0x{:x}\n    struct __old_kernel_stat *statbuf = {}\n}}", (int)arg1, (void*)arg2);
    }
    case 29: {
        return fmt::format("pause: {{}}");
    }
    case 30: {
        return fmt::format("utime: {{\n    const char *filename = {}\n    struct old_utimbuf32 *t = {}\n}}", nullable((const char*)arg1),
                           (void*)arg2);
    }
    case 33: {
        return fmt::format("access: {{\n    const char *filename = {}\n    int mode = 0x{:x}\n}}", nullable((const char*)arg1), (int)arg2);
    }
    case 34: {
        return fmt::format("nice: {{\n    int increment = 0x{:x}\n}}", (int)arg1);
    }
    case 36: {
        return fmt::format("sync: {{}}");
    }
    case 37: {
        return fmt::format("kill: {{\n    pid_t pid = {}\n    int sig = 0x{:x}\n}}", (void*)arg1, (int)arg2);
    }
    case 38: {
        return fmt::format("rename: {{\n    const char *oldname = {}\n    const char *newname = {}\n}}", nullable((const char*)arg1),
                           nullable((const char*)arg2));
    }
    case 39: {
        return fmt::format("mkdir: {{\n    const char *pathname = {}\n    umode_t mode = {}\n}}", nullable((const char*)arg1), (void*)arg2);
    }
    case 40: {
        return fmt::format("rmdir: {{\n    const char *pathname = {}\n}}", nullable((const char*)arg1));
    }
    case 41: {
        return fmt::format("dup: {{\n    unsigned int fildes = 0x{:x}\n}}", (int)arg1);
    }
    case 42: {
        return fmt::format("pipe: {{\n    int *fildes = {}\n}}", (void*)arg1);
    }
    case 43: {
        return fmt::format("times: {{\n    struct tms *tbuf = {}\n}}", (void*)arg1);
    }
    case 45: {
        return fmt::format("brk: {{\n    unsigned long brk = 0x{:x}\n}}", (u64)arg1);
    }
    case 46: {
        return fmt::format("setgid16: {{\n    old_gid_t gid = {}\n}}", (void*)arg1);
    }
    case 47: {
        return fmt::format("getgid16: {{}}");
    }
    case 48: {
        return fmt::format("signal: {{\n    int sig = 0x{:x}\n    __sighandler_t handler = {}\n}}", (int)arg1, (void*)arg2);
    }
    case 49: {
        return fmt::format("geteuid16: {{}}");
    }
    case 50: {
        return fmt::format("getegid16: {{}}");
    }
    case 51: {
        return fmt::format("acct: {{\n    const char *name = {}\n}}", nullable((const char*)arg1));
    }
    case 52: {
        return fmt::format("umount: {{\n    char *name = {}\n    int flags = 0x{:x}\n}}", nullable((const char*)arg1), (int)arg2);
    }
    case 54: {
        return fmt::format("ioctl: {{\n    unsigned int fd = 0x{:x}\n    unsigned int cmd = 0x{:x}\n    unsigned long arg = 0x{:x}\n}}", (int)arg1,
                           (int)arg2, (u64)arg3);
    }
    case 55: {
        return fmt::format("fcntl: {{\n    unsigned int fd = 0x{:x}\n    unsigned int cmd = 0x{:x}\n    unsigned long arg = 0x{:x}\n}}", (int)arg1,
                           (int)arg2, (u64)arg3);
    }
    case 57: {
        return fmt::format("setpgid: {{\n    pid_t pid = {}\n    pid_t pgid = {}\n}}", (void*)arg1, (void*)arg2);
    }
    case 59: {
        return fmt::format("olduname: {{\n    struct oldold_utsname *name = {}\n}}", (void*)arg1);
    }
    case 60: {
        return fmt::format("umask: {{\n    int mask = 0x{:x}\n}}", (int)arg1);
    }
    case 61: {
        return fmt::format("chroot: {{\n    const char *filename = {}\n}}", nullable((const char*)arg1));
    }
    case 62: {
        return fmt::format("ustat: {{\n    unsigned dev = {}\n    struct ustat *ubuf = {}\n}}", (void*)arg1, (void*)arg2);
    }
    case 63: {
        return fmt::format("dup2: {{\n    unsigned int oldfd = 0x{:x}\n    unsigned int newfd = 0x{:x}\n}}", (int)arg1, (int)arg2);
    }
    case 64: {
        return fmt::format("getppid: {{}}");
    }
    case 65: {
        return fmt::format("getpgrp: {{}}");
    }
    case 66: {
        return fmt::format("setsid: {{}}");
    }
    case 67: {
        return fmt::format("sigaction: {{\n    int sig = 0x{:x}\n    const struct old_sigaction *act = {}\n    struct old_sigaction *oact = {}\n}}",
                           (int)arg1, (void*)arg2, (void*)arg3);
    }
    case 68: {
        return fmt::format("sgetmask: {{}}");
    }
    case 69: {
        return fmt::format("ssetmask: {{\n    int newmask = 0x{:x}\n}}", (int)arg1);
    }
    case 70: {
        return fmt::format("setreuid16: {{\n    old_uid_t ruid = {}\n    old_uid_t euid = {}\n}}", (void*)arg1, (void*)arg2);
    }
    case 71: {
        return fmt::format("setregid16: {{\n    old_gid_t rgid = {}\n    old_gid_t egid = {}\n}}", (void*)arg1, (void*)arg2);
    }
    case 72: {
        return fmt::format("sigsuspend: {{\n    int unused1 = 0x{:x}\n    int unused2 = 0x{:x}\n    old_sigset_t mask = {}\n}}", (int)arg1, (int)arg2,
                           (void*)arg3);
    }
    case 73: {
        return fmt::format("sigpending: {{\n    old_sigset_t *uset = {}\n}}", (void*)arg1);
    }
    case 74: {
        return fmt::format("sethostname: {{\n    char *name = {}\n    int len = 0x{:x}\n}}", nullable((const char*)arg1), (int)arg2);
    }
    case 75: {
        return fmt::format("setrlimit: {{\n    unsigned int resource = 0x{:x}\n    struct rlimit *rlim = {}\n}}", (int)arg1, (void*)arg2);
    }
    case 76: {
        return fmt::format("getrlimit: {{\n    unsigned int resource = 0x{:x}\n    struct rlimit *rlim = {}\n}}", (int)arg1, (void*)arg2);
    }
    case 77: {
        return fmt::format("getrusage: {{\n    int who = 0x{:x}\n    struct rusage *ru = {}\n}}", (int)arg1, (void*)arg2);
    }
    case 78: {
        return fmt::format("gettimeofday: {{\n    struct __kernel_old_timeval *tv = {}\n    struct timezone *tz = {}\n}}", (void*)arg1, (void*)arg2);
    }
    case 79: {
        return fmt::format("settimeofday: {{\n    struct __kernel_old_timeval *tv = {}\n    struct timezone *tz = {}\n}}", (void*)arg1, (void*)arg2);
    }
    case 80: {
        return fmt::format("getgroups16: {{\n    int gidsetsize = 0x{:x}\n    old_gid_t *grouplist = {}\n}}", (int)arg1, (void*)arg2);
    }
    case 81: {
        return fmt::format("setgroups16: {{\n    int gidsetsize = 0x{:x}\n    old_gid_t *grouplist = {}\n}}", (int)arg1, (void*)arg2);
    }
    case 82: {
        return fmt::format("select: {{\n    struct sel_arg_struct *arg = {}\n}}", (void*)arg1);
    }
    case 83: {
        return fmt::format("symlink: {{\n    const char *oldname = {}\n    const char *newname = {}\n}}", nullable((const char*)arg1),
                           nullable((const char*)arg2));
    }
    case 84: {
        return fmt::format("lstat: {{\n    const char *filename = {}\n    struct __old_kernel_stat *statbuf = {}\n}}", nullable((const char*)arg1),
                           (void*)arg2);
    }
    case 85: {
        return fmt::format("readlink: {{\n    const char *path = {}\n    char *buf = {}\n    int bufsiz = 0x{:x}\n}}", nullable((const char*)arg1),
                           nullable((const char*)arg2), (int)arg3);
    }
    case 86: {
        return fmt::format("uselib: {{\n    const char *library = {}\n}}", nullable((const char*)arg1));
    }
    case 87: {
        return fmt::format("swapon: {{\n    const char *specialfile = {}\n    int swap_flags = 0x{:x}\n}}", nullable((const char*)arg1), (int)arg2);
    }
    case 88: {
        return fmt::format("reboot: {{\n    int magic1 = 0x{:x}\n    int magic2 = 0x{:x}\n    unsigned int cmd = 0x{:x}\n    void *arg = {}\n}}",
                           (int)arg1, (int)arg2, (int)arg3, (void*)arg4);
    }
    case 89: {
        return fmt::format("readdir: {{\n    unsigned int fd = 0x{:x}\n    struct old_linux_dirent *dirent = {}\n    unsigned int count = 0x{:x}\n}}",
                           (int)arg1, (void*)arg2, (int)arg3);
    }
    case 90: {
        return fmt::format("mmap: {{\n    struct mmap_arg_struct *arg = {}\n}}", (void*)arg1);
    }
    case 91: {
        return fmt::format("munmap: {{\n    unsigned long addr = 0x{:x}\n    size_t len = 0x{:x}\n}}", (u64)arg1, (u64)arg2);
    }
    case 92: {
        return fmt::format("truncate: {{\n    const char *path = {}\n    long length = 0x{:x}\n}}", nullable((const char*)arg1), (u64)arg2);
    }
    case 93: {
        return fmt::format("ftruncate: {{\n    unsigned int fd = 0x{:x}\n    unsigned long length = 0x{:x}\n}}", (int)arg1, (u64)arg2);
    }
    case 94: {
        return fmt::format("fchmod: {{\n    unsigned int fd = 0x{:x}\n    umode_t mode = {}\n}}", (int)arg1, (void*)arg2);
    }
    case 95: {
        return fmt::format("fchown16: {{\n    unsigned int fd = 0x{:x}\n    old_uid_t user = {}\n    old_gid_t group = {}\n}}", (int)arg1,
                           (void*)arg2, (void*)arg3);
    }
    case 96: {
        return fmt::format("getpriority: {{\n    int which = 0x{:x}\n    int who = 0x{:x}\n}}", (int)arg1, (int)arg2);
    }
    case 97: {
        return fmt::format("setpriority: {{\n    int which = 0x{:x}\n    int who = 0x{:x}\n    int niceval = 0x{:x}\n}}", (int)arg1, (int)arg2,
                           (int)arg3);
    }
    case 99: {
        return fmt::format("statfs: {{\n    const char *pathname = {}\n    struct statfs *buf = {}\n}}", nullable((const char*)arg1), (void*)arg2);
    }
    case 100: {
        return fmt::format("fstatfs: {{\n    unsigned int fd = 0x{:x}\n    struct statfs *buf = {}\n}}", (int)arg1, (void*)arg2);
    }
    case 101: {
        return fmt::format("ioperm: {{\n    unsigned long from = 0x{:x}\n    unsigned long num = 0x{:x}\n    int turn_on = 0x{:x}\n}}", (u64)arg1,
                           (u64)arg2, (int)arg3);
    }
    case 102: {
        return fmt::format("socketcall: {{\n    int call = 0x{:x}\n    unsigned long *args = {}\n}}", (int)arg1, (void*)arg2);
    }
    case 103: {
        return fmt::format("syslog: {{\n    int type = 0x{:x}\n    char *buf = {}\n    int len = 0x{:x}\n}}", (int)arg1, nullable((const char*)arg2),
                           (int)arg3);
    }
    case 104: {
        return fmt::format("setitimer: {{\n    int which = 0x{:x}\n    struct __kernel_old_itimerval *value = {}\n    struct __kernel_old_itimerval "
                           "*ovalue = {}\n}}",
                           (int)arg1, (void*)arg2, (void*)arg3);
    }
    case 105: {
        return fmt::format("getitimer: {{\n    int which = 0x{:x}\n    struct __kernel_old_itimerval *value = {}\n}}", (int)arg1, (void*)arg2);
    }
    case 106: {
        return fmt::format("newstat: {{\n    const char *filename = {}\n    struct stat *statbuf = {}\n}}", nullable((const char*)arg1), (void*)arg2);
    }
    case 107: {
        return fmt::format("newlstat: {{\n    const char *filename = {}\n    struct stat *statbuf = {}\n}}", nullable((const char*)arg1),
                           (void*)arg2);
    }
    case 108: {
        return fmt::format("newfstat: {{\n    unsigned int fd = 0x{:x}\n    struct stat *statbuf = {}\n}}", (int)arg1, (void*)arg2);
    }
    case 109: {
        return fmt::format("uname: {{\n    struct old_utsname *name = {}\n}}", (void*)arg1);
    }
    case 110: {
        return fmt::format("iopl: {{\n    unsigned int level = 0x{:x}\n}}", (int)arg1);
    }
    case 111: {
        return fmt::format("vhangup: {{}}");
    }
    case 113: {
        return fmt::format("vm86old: {{\n    struct vm86_struct *user_vm86 = {}\n}}", (void*)arg1);
    }
    case 114: {
        return fmt::format("wait4: {{\n    pid_t upid = {}\n    int *stat_addr = {}\n    int options = 0x{:x}\n    struct rusage *ru = {}\n}}",
                           (void*)arg1, (void*)arg2, (int)arg3, (void*)arg4);
    }
    case 115: {
        return fmt::format("swapoff: {{\n    const char *specialfile = {}\n}}", nullable((const char*)arg1));
    }
    case 116: {
        return fmt::format("sysinfo: {{\n    struct sysinfo *info = {}\n}}", (void*)arg1);
    }
    case 117: {
        return fmt::format("ipc: {{\n    unsigned int call = 0x{:x}\n    int first = 0x{:x}\n    unsigned long second = 0x{:x}\n    unsigned long "
                           "third = 0x{:x}\n    void *ptr = {}\n    long fifth = 0x{:x}\n}}",
                           (int)arg1, (int)arg2, (u64)arg3, (u64)arg4, (void*)arg5, (u64)arg6);
    }
    case 118: {
        return fmt::format("fsync: {{\n    unsigned int fd = 0x{:x}\n}}", (int)arg1);
    }
    case 119: {
        return fmt::format("sigreturn: {{}}");
    }
    case 120: {
        return fmt::format("clone: {{\n    unsigned long clone_flags = 0x{:x}\n    unsigned long newsp = 0x{:x}\n    int *parent_tidptr = {}\n    "
                           "unsigned long tls = 0x{:x}\n    int *child_tidptr = {}\n}}",
                           (u64)arg1, (u64)arg2, (void*)arg3, (u64)arg4, (void*)arg5);
    }
    case 121: {
        return fmt::format("setdomainname: {{\n    char *name = {}\n    int len = 0x{:x}\n}}", nullable((const char*)arg1), (int)arg2);
    }
    case 122: {
        return fmt::format("newuname: {{\n    struct new_utsname *name = {}\n}}", (void*)arg1);
    }
    case 123: {
        return fmt::format("modify_ldt: {{\n    int func = 0x{:x}\n    void *ptr = {}\n    unsigned long bytecount = 0x{:x}\n}}", (int)arg1,
                           (void*)arg2, (u64)arg3);
    }
    case 124: {
        return fmt::format("adjtimex: {{\n    struct old_timex32 *utp = {}\n}}", (void*)arg1);
    }
    case 125: {
        return fmt::format("mprotect: {{\n    unsigned long start = 0x{:x}\n    size_t len = 0x{:x}\n    unsigned long prot = 0x{:x}\n}}", (u64)arg1,
                           (u64)arg2, (u64)arg3);
    }
    case 126: {
        return fmt::format("sigprocmask: {{\n    int how = 0x{:x}\n    old_sigset_t *nset = {}\n    old_sigset_t *oset = {}\n}}", (int)arg1,
                           (void*)arg2, (void*)arg3);
    }
    case 128: {
        return fmt::format("init_module: {{\n    void *umod = {}\n    unsigned long len = 0x{:x}\n    const char *uargs = {}\n}}", (void*)arg1,
                           (u64)arg2, nullable((const char*)arg3));
    }
    case 129: {
        return fmt::format("delete_module: {{\n    const char *name_user = {}\n    unsigned int flags = 0x{:x}\n}}", nullable((const char*)arg1),
                           (int)arg2);
    }
    case 131: {
        return fmt::format("quotactl: {{\n    unsigned int cmd = 0x{:x}\n    const char *special = {}\n    qid_t id = {}\n    void *addr = {}\n}}",
                           (int)arg1, nullable((const char*)arg2), (void*)arg3, (void*)arg4);
    }
    case 132: {
        return fmt::format("getpgid: {{\n    pid_t pid = {}\n}}", (void*)arg1);
    }
    case 133: {
        return fmt::format("fchdir: {{\n    unsigned int fd = 0x{:x}\n}}", (int)arg1);
    }
    case 135: {
        return fmt::format("sysfs: {{\n    int option = 0x{:x}\n    unsigned long arg1 = 0x{:x}\n    unsigned long arg2 = 0x{:x}\n}}", (int)arg1,
                           (u64)arg2, (u64)arg3);
    }
    case 136: {
        return fmt::format("personality: {{\n    unsigned int personality = 0x{:x}\n}}", (int)arg1);
    }
    case 138: {
        return fmt::format("setfsuid16: {{\n    old_uid_t uid = {}\n}}", (void*)arg1);
    }
    case 139: {
        return fmt::format("setfsgid16: {{\n    old_gid_t gid = {}\n}}", (void*)arg1);
    }
    case 140: {
        return fmt::format("llseek: {{\n    unsigned int fd = 0x{:x}\n    unsigned long offset_high = 0x{:x}\n    unsigned long offset_low = "
                           "0x{:x}\n    loff_t *result = {}\n    unsigned int whence = 0x{:x}\n}}",
                           (int)arg1, (u64)arg2, (u64)arg3, (void*)arg4, (int)arg5);
    }
    case 141: {
        return fmt::format("getdents: {{\n    unsigned int fd = 0x{:x}\n    struct linux_dirent *dirent = {}\n    unsigned int count = 0x{:x}\n}}",
                           (int)arg1, (void*)arg2, (int)arg3);
    }
    case 142: {
        return fmt::format("select: {{\n    int n = 0x{:x}\n    fd_set *inp = {}\n    fd_set *outp = {}\n    fd_set *exp = {}\n    struct "
                           "__kernel_old_timeval *tvp = {}\n}}",
                           (int)arg1, (void*)arg2, (void*)arg3, (void*)arg4, (void*)arg5);
    }
    case 143: {
        return fmt::format("flock: {{\n    unsigned int fd = 0x{:x}\n    unsigned int cmd = 0x{:x}\n}}", (int)arg1, (int)arg2);
    }
    case 144: {
        return fmt::format("msync: {{\n    unsigned long start = 0x{:x}\n    size_t len = 0x{:x}\n    int flags = 0x{:x}\n}}", (u64)arg1, (u64)arg2,
                           (int)arg3);
    }
    case 145: {
        return fmt::format("readv: {{\n    unsigned long fd = 0x{:x}\n    const struct iovec *vec = {}\n    unsigned long vlen = 0x{:x}\n}}",
                           (u64)arg1, (void*)arg2, (u64)arg3);
    }
    case 146: {
        return fmt::format("writev: {{\n    unsigned long fd = 0x{:x}\n    const struct iovec *vec = {}\n    unsigned long vlen = 0x{:x}\n}}",
                           (u64)arg1, (void*)arg2, (u64)arg3);
    }
    case 147: {
        return fmt::format("getsid: {{\n    pid_t pid = {}\n}}", (void*)arg1);
    }
    case 148: {
        return fmt::format("fdatasync: {{\n    unsigned int fd = 0x{:x}\n}}", (int)arg1);
    }
    case 150: {
        return fmt::format("mlock: {{\n    unsigned long start = 0x{:x}\n    size_t len = 0x{:x}\n}}", (u64)arg1, (u64)arg2);
    }
    case 151: {
        return fmt::format("munlock: {{\n    unsigned long start = 0x{:x}\n    size_t len = 0x{:x}\n}}", (u64)arg1, (u64)arg2);
    }
    case 152: {
        return fmt::format("mlockall: {{\n    int flags = 0x{:x}\n}}", (int)arg1);
    }
    case 153: {
        return fmt::format("munlockall: {{}}");
    }
    case 154: {
        return fmt::format("sched_setparam: {{\n    pid_t pid = {}\n    struct sched_param *param = {}\n}}", (void*)arg1, (void*)arg2);
    }
    case 155: {
        return fmt::format("sched_getparam: {{\n    pid_t pid = {}\n    struct sched_param *param = {}\n}}", (void*)arg1, (void*)arg2);
    }
    case 156: {
        return fmt::format("sched_setscheduler: {{\n    pid_t pid = {}\n    int policy = 0x{:x}\n    struct sched_param *param = {}\n}}", (void*)arg1,
                           (int)arg2, (void*)arg3);
    }
    case 157: {
        return fmt::format("sched_getscheduler: {{\n    pid_t pid = {}\n}}", (void*)arg1);
    }
    case 158: {
        return fmt::format("sched_yield: {{}}");
    }
    case 159: {
        return fmt::format("sched_get_priority_max: {{\n    int policy = 0x{:x}\n}}", (int)arg1);
    }
    case 160: {
        return fmt::format("sched_get_priority_min: {{\n    int policy = 0x{:x}\n}}", (int)arg1);
    }
    case 161: {
        return fmt::format("sched_rr_get_interval: {{\n    pid_t pid = {}\n    struct old_timespec32 *interval = {}\n}}", (void*)arg1, (void*)arg2);
    }
    case 162: {
        return fmt::format("nanosleep: {{\n    struct old_timespec32 *rqtp = {}\n    struct old_timespec32 *rmtp = {}\n}}", (void*)arg1, (void*)arg2);
    }
    case 163: {
        return fmt::format("mremap: {{\n    unsigned long addr = 0x{:x}\n    unsigned long old_len = 0x{:x}\n    unsigned long new_len = 0x{:x}\n    "
                           "unsigned long flags = 0x{:x}\n    unsigned long new_addr = 0x{:x}\n}}",
                           (u64)arg1, (u64)arg2, (u64)arg3, (u64)arg4, (u64)arg5);
    }
    case 164: {
        return fmt::format("setresuid16: {{\n    old_uid_t ruid = {}\n    old_uid_t euid = {}\n    old_uid_t suid = {}\n}}", (void*)arg1, (void*)arg2,
                           (void*)arg3);
    }
    case 165: {
        return fmt::format("getresuid16: {{\n    old_uid_t *ruidp = {}\n    old_uid_t *euidp = {}\n    old_uid_t *suidp = {}\n}}", (void*)arg1,
                           (void*)arg2, (void*)arg3);
    }
    case 166: {
        return fmt::format("vm86: {{\n    unsigned long cmd = 0x{:x}\n    unsigned long arg = 0x{:x}\n}}", (u64)arg1, (u64)arg2);
    }
    case 168: {
        return fmt::format("poll: {{\n    struct pollfd *ufds = {}\n    unsigned int nfds = 0x{:x}\n    int timeout_msecs = 0x{:x}\n}}", (void*)arg1,
                           (int)arg2, (int)arg3);
    }
    case 170: {
        return fmt::format("setresgid16: {{\n    old_gid_t rgid = {}\n    old_gid_t egid = {}\n    old_gid_t sgid = {}\n}}", (void*)arg1, (void*)arg2,
                           (void*)arg3);
    }
    case 171: {
        return fmt::format("getresgid16: {{\n    old_gid_t *rgidp = {}\n    old_gid_t *egidp = {}\n    old_gid_t *sgidp = {}\n}}", (void*)arg1,
                           (void*)arg2, (void*)arg3);
    }
    case 172: {
        return fmt::format("prctl: {{\n    int option = 0x{:x}\n    unsigned long arg2 = 0x{:x}\n    unsigned long arg3 = 0x{:x}\n    unsigned long "
                           "arg4 = 0x{:x}\n    unsigned long arg5 = 0x{:x}\n}}",
                           (int)arg1, (u64)arg2, (u64)arg3, (u64)arg4, (u64)arg5);
    }
    case 173: {
        return fmt::format("rt_sigreturn: {{}}");
    }
    case 174: {
        return fmt::format("rt_sigaction: {{\n    int sig = 0x{:x}\n    const struct sigaction *act = {}\n    struct sigaction *oact = {}\n    "
                           "size_t sigsetsize = 0x{:x}\n}}",
                           (int)arg1, (void*)arg2, (void*)arg3, (u64)arg4);
    }
    case 175: {
        return fmt::format(
            "rt_sigprocmask: {{\n    int how = 0x{:x}\n    sigset_t *nset = {}\n    sigset_t *oset = {}\n    size_t sigsetsize = 0x{:x}\n}}",
            (int)arg1, (void*)arg2, (void*)arg3, (u64)arg4);
    }
    case 176: {
        return fmt::format("rt_sigpending: {{\n    sigset_t *uset = {}\n    size_t sigsetsize = 0x{:x}\n}}", (void*)arg1, (u64)arg2);
    }
    case 177: {
        return fmt::format("rt_sigtimedwait: {{\n    const sigset_t *uthese = {}\n    siginfo_t *uinfo = {}\n    const struct old_timespec32 *uts = "
                           "{}\n    size_t sigsetsize = 0x{:x}\n}}",
                           (void*)arg1, (void*)arg2, (void*)arg3, (u64)arg4);
    }
    case 178: {
        return fmt::format("rt_sigqueueinfo: {{\n    pid_t pid = {}\n    int sig = 0x{:x}\n    siginfo_t *uinfo = {}\n}}", (void*)arg1, (int)arg2,
                           (void*)arg3);
    }
    case 179: {
        return fmt::format("rt_sigsuspend: {{\n    sigset_t *unewset = {}\n    size_t sigsetsize = 0x{:x}\n}}", (void*)arg1, (u64)arg2);
    }
    case 180: {
        return fmt::format(
            "pread64: {{\n    unsigned int fd = 0x{:x}\n    char *ubuf = {}\n    u32 count = {}\n    u32 poslo = {}\n    u32 poshi = {}\n}}",
            (int)arg1, nullable((const char*)arg2), (void*)arg3, (void*)arg4, (void*)arg5);
    }
    case 181: {
        return fmt::format(
            "pwrite64: {{\n    unsigned int fd = 0x{:x}\n    const char *ubuf = {}\n    u32 count = {}\n    u32 poslo = {}\n    u32 poshi = {}\n}}",
            (int)arg1, nullable((const char*)arg2), (void*)arg3, (void*)arg4, (void*)arg5);
    }
    case 182: {
        return fmt::format("chown16: {{\n    const char *filename = {}\n    old_uid_t user = {}\n    old_gid_t group = {}\n}}",
                           nullable((const char*)arg1), (void*)arg2, (void*)arg3);
    }
    case 183: {
        return fmt::format("getcwd: {{\n    char *buf = {}\n    unsigned long size = 0x{:x}\n}}", nullable((const char*)arg1), (u64)arg2);
    }
    case 184: {
        return fmt::format("capget: {{\n    cap_user_header_t header = {}\n    cap_user_data_t dataptr = {}\n}}", (void*)arg1, (void*)arg2);
    }
    case 185: {
        return fmt::format("capset: {{\n    cap_user_header_t header = {}\n    const cap_user_data_t data = {}\n}}", (void*)arg1, (void*)arg2);
    }
    case 186: {
        return fmt::format("sigaltstack: {{\n    const stack_t *uss = {}\n    stack_t *uoss = {}\n}}", (void*)arg1, (void*)arg2);
    }
    case 187: {
        return fmt::format("sendfile: {{\n    int out_fd = 0x{:x}\n    int in_fd = 0x{:x}\n    off_t *offset = {}\n    size_t count = 0x{:x}\n}}",
                           (int)arg1, (int)arg2, (void*)arg3, (u64)arg4);
    }
    case 190: {
        return fmt::format("vfork: {{}}");
    }
    case 191: {
        return fmt::format("getrlimit: {{\n    unsigned int resource = 0x{:x}\n    struct rlimit *rlim = {}\n}}", (int)arg1, (void*)arg2);
    }
    case 192: {
        return fmt::format("mmap_pgoff: {{\n    unsigned long addr = 0x{:x}\n    unsigned long len = 0x{:x}\n    unsigned long prot = 0x{:x}\n    "
                           "unsigned long flags = 0x{:x}\n    unsigned long fd = 0x{:x}\n    unsigned long pgoff = 0x{:x}\n}}",
                           (u64)arg1, (u64)arg2, (u64)arg3, (u64)arg4, (u64)arg5, (u64)arg6);
    }
    case 193: {
        return fmt::format(
            "truncate64: {{\n    const char *filename = {}\n    unsigned long offset_low = 0x{:x}\n    unsigned long offset_high = 0x{:x}\n}}",
            nullable((const char*)arg1), (u64)arg2, (u64)arg3);
    }
    case 194: {
        return fmt::format(
            "ftruncate64: {{\n    unsigned int fd = 0x{:x}\n    unsigned long offset_low = 0x{:x}\n    unsigned long offset_high = 0x{:x}\n}}",
            (int)arg1, (u64)arg2, (u64)arg3);
    }
    case 195: {
        return fmt::format("stat64: {{\n    const char *filename = {}\n    struct stat64 *statbuf = {}\n}}", nullable((const char*)arg1),
                           (void*)arg2);
    }
    case 196: {
        return fmt::format("lstat64: {{\n    const char *filename = {}\n    struct stat64 *statbuf = {}\n}}", nullable((const char*)arg1),
                           (void*)arg2);
    }
    case 197: {
        return fmt::format("fstat64: {{\n    unsigned long fd = 0x{:x}\n    struct stat64 *statbuf = {}\n}}", (u64)arg1, (void*)arg2);
    }
    case 198: {
        return fmt::format("lchown: {{\n    const char *filename = {}\n    uid_t user = {}\n    gid_t group = {}\n}}", nullable((const char*)arg1),
                           (void*)arg2, (void*)arg3);
    }
    case 199: {
        return fmt::format("getuid: {{}}");
    }
    case 200: {
        return fmt::format("getgid: {{}}");
    }
    case 201: {
        return fmt::format("geteuid: {{}}");
    }
    case 202: {
        return fmt::format("getegid: {{}}");
    }
    case 203: {
        return fmt::format("setreuid: {{\n    uid_t ruid = {}\n    uid_t euid = {}\n}}", (void*)arg1, (void*)arg2);
    }
    case 204: {
        return fmt::format("setregid: {{\n    gid_t rgid = {}\n    gid_t egid = {}\n}}", (void*)arg1, (void*)arg2);
    }
    case 205: {
        return fmt::format("getgroups: {{\n    int gidsetsize = 0x{:x}\n    gid_t *grouplist = {}\n}}", (int)arg1, (void*)arg2);
    }
    case 206: {
        return fmt::format("setgroups: {{\n    int gidsetsize = 0x{:x}\n    gid_t *grouplist = {}\n}}", (int)arg1, (void*)arg2);
    }
    case 207: {
        return fmt::format("fchown: {{\n    unsigned int fd = 0x{:x}\n    uid_t user = {}\n    gid_t group = {}\n}}", (int)arg1, (void*)arg2,
                           (void*)arg3);
    }
    case 208: {
        return fmt::format("setresuid: {{\n    uid_t ruid = {}\n    uid_t euid = {}\n    uid_t suid = {}\n}}", (void*)arg1, (void*)arg2, (void*)arg3);
    }
    case 209: {
        return fmt::format("getresuid: {{\n    uid_t *ruidp = {}\n    uid_t *euidp = {}\n    uid_t *suidp = {}\n}}", (void*)arg1, (void*)arg2,
                           (void*)arg3);
    }
    case 210: {
        return fmt::format("setresgid: {{\n    gid_t rgid = {}\n    gid_t egid = {}\n    gid_t sgid = {}\n}}", (void*)arg1, (void*)arg2, (void*)arg3);
    }
    case 211: {
        return fmt::format("getresgid: {{\n    gid_t *rgidp = {}\n    gid_t *egidp = {}\n    gid_t *sgidp = {}\n}}", (void*)arg1, (void*)arg2,
                           (void*)arg3);
    }
    case 212: {
        return fmt::format("chown: {{\n    const char *filename = {}\n    uid_t user = {}\n    gid_t group = {}\n}}", nullable((const char*)arg1),
                           (void*)arg2, (void*)arg3);
    }
    case 213: {
        return fmt::format("setuid: {{\n    uid_t uid = {}\n}}", (void*)arg1);
    }
    case 214: {
        return fmt::format("setgid: {{\n    gid_t gid = {}\n}}", (void*)arg1);
    }
    case 215: {
        return fmt::format("setfsuid: {{\n    uid_t uid = {}\n}}", (void*)arg1);
    }
    case 216: {
        return fmt::format("setfsgid: {{\n    gid_t gid = {}\n}}", (void*)arg1);
    }
    case 217: {
        return fmt::format("pivot_root: {{\n    const char *new_root = {}\n    const char *put_old = {}\n}}", nullable((const char*)arg1),
                           nullable((const char*)arg2));
    }
    case 218: {
        return fmt::format("mincore: {{\n    unsigned long start = 0x{:x}\n    size_t len = 0x{:x}\n    unsigned char *vec = {}\n}}", (u64)arg1,
                           (u64)arg2, (void*)arg3);
    }
    case 219: {
        return fmt::format("madvise: {{\n    unsigned long start = 0x{:x}\n    size_t len_in = 0x{:x}\n    int behavior = 0x{:x}\n}}", (u64)arg1,
                           (u64)arg2, (int)arg3);
    }
    case 220: {
        return fmt::format(
            "getdents64: {{\n    unsigned int fd = 0x{:x}\n    struct linux_dirent64 *dirent = {}\n    unsigned int count = 0x{:x}\n}}", (int)arg1,
            (void*)arg2, (int)arg3);
    }
    case 221: {
        return fmt::format("fcntl64: {{\n    unsigned int fd = 0x{:x}\n    unsigned int cmd = 0x{:x}\n    unsigned long arg = 0x{:x}\n}}", (int)arg1,
                           (int)arg2, (u64)arg3);
    }
    case 224: {
        return fmt::format("gettid: {{}}");
    }
    case 225: {
        return fmt::format(
            "readahead: {{\n    int fd = 0x{:x}\n    unsigned int off_lo = 0x{:x}\n    unsigned int off_hi = 0x{:x}\n    size_t count = 0x{:x}\n}}",
            (int)arg1, (int)arg2, (int)arg3, (u64)arg4);
    }
    case 226: {
        return fmt::format("setxattr: {{\n    const char *pathname = {}\n    const char *name = {}\n    const void *value = {}\n    size_t size = "
                           "0x{:x}\n    int flags = 0x{:x}\n}}",
                           nullable((const char*)arg1), nullable((const char*)arg2), (void*)arg3, (u64)arg4, (int)arg5);
    }
    case 227: {
        return fmt::format("lsetxattr: {{\n    const char *pathname = {}\n    const char *name = {}\n    const void *value = {}\n    size_t size = "
                           "0x{:x}\n    int flags = 0x{:x}\n}}",
                           nullable((const char*)arg1), nullable((const char*)arg2), (void*)arg3, (u64)arg4, (int)arg5);
    }
    case 228: {
        return fmt::format("fsetxattr: {{\n    int fd = 0x{:x}\n    const char *name = {}\n    const void *value = {}\n    size_t size = 0x{:x}\n    "
                           "int flags = 0x{:x}\n}}",
                           (int)arg1, nullable((const char*)arg2), (void*)arg3, (u64)arg4, (int)arg5);
    }
    case 229: {
        return fmt::format(
            "getxattr: {{\n    const char *pathname = {}\n    const char *name = {}\n    void *value = {}\n    size_t size = 0x{:x}\n}}",
            nullable((const char*)arg1), nullable((const char*)arg2), (void*)arg3, (u64)arg4);
    }
    case 230: {
        return fmt::format(
            "lgetxattr: {{\n    const char *pathname = {}\n    const char *name = {}\n    void *value = {}\n    size_t size = 0x{:x}\n}}",
            nullable((const char*)arg1), nullable((const char*)arg2), (void*)arg3, (u64)arg4);
    }
    case 231: {
        return fmt::format("fgetxattr: {{\n    int fd = 0x{:x}\n    const char *name = {}\n    void *value = {}\n    size_t size = 0x{:x}\n}}",
                           (int)arg1, nullable((const char*)arg2), (void*)arg3, (u64)arg4);
    }
    case 232: {
        return fmt::format("listxattr: {{\n    const char *pathname = {}\n    char *list = {}\n    size_t size = 0x{:x}\n}}",
                           nullable((const char*)arg1), nullable((const char*)arg2), (u64)arg3);
    }
    case 233: {
        return fmt::format("llistxattr: {{\n    const char *pathname = {}\n    char *list = {}\n    size_t size = 0x{:x}\n}}",
                           nullable((const char*)arg1), nullable((const char*)arg2), (u64)arg3);
    }
    case 234: {
        return fmt::format("flistxattr: {{\n    int fd = 0x{:x}\n    char *list = {}\n    size_t size = 0x{:x}\n}}", (int)arg1,
                           nullable((const char*)arg2), (u64)arg3);
    }
    case 235: {
        return fmt::format("removexattr: {{\n    const char *pathname = {}\n    const char *name = {}\n}}", nullable((const char*)arg1),
                           nullable((const char*)arg2));
    }
    case 236: {
        return fmt::format("lremovexattr: {{\n    const char *pathname = {}\n    const char *name = {}\n}}", nullable((const char*)arg1),
                           nullable((const char*)arg2));
    }
    case 237: {
        return fmt::format("fremovexattr: {{\n    int fd = 0x{:x}\n    const char *name = {}\n}}", (int)arg1, nullable((const char*)arg2));
    }
    case 238: {
        return fmt::format("tkill: {{\n    pid_t pid = {}\n    int sig = 0x{:x}\n}}", (void*)arg1, (int)arg2);
    }
    case 239: {
        return fmt::format("sendfile64: {{\n    int out_fd = 0x{:x}\n    int in_fd = 0x{:x}\n    loff_t *offset = {}\n    size_t count = 0x{:x}\n}}",
                           (int)arg1, (int)arg2, (void*)arg3, (u64)arg4);
    }
    case 240: {
        return fmt::format("futex: {{\n    u32 *uaddr = {}\n    int op = 0x{:x}\n    u32 val = {}\n    const struct old_timespec32 *utime = {}\n    "
                           "u32 *uaddr2 = {}\n    u32 val3 = {}\n}}",
                           (void*)arg1, (int)arg2, (void*)arg3, (void*)arg4, (void*)arg5, (void*)arg6);
    }
    case 241: {
        return fmt::format("sched_setaffinity: {{\n    pid_t pid = {}\n    unsigned int len = 0x{:x}\n    unsigned long *user_mask_ptr = {}\n}}",
                           (void*)arg1, (int)arg2, (void*)arg3);
    }
    case 242: {
        return fmt::format("sched_getaffinity: {{\n    pid_t pid = {}\n    unsigned int len = 0x{:x}\n    unsigned long *user_mask_ptr = {}\n}}",
                           (void*)arg1, (int)arg2, (void*)arg3);
    }
    case 243: {
        return fmt::format("set_thread_area: {{\n    struct user_desc *u_info = {}\n}}", (void*)arg1);
    }
    case 244: {
        return fmt::format("get_thread_area: {{\n    struct user_desc *u_info = {}\n}}", (void*)arg1);
    }
    case 245: {
        return fmt::format("io_setup: {{\n    unsigned nr_events = {}\n    aio_context_t *ctxp = {}\n}}", (void*)arg1, (void*)arg2);
    }
    case 246: {
        return fmt::format("io_destroy: {{\n    aio_context_t ctx = {}\n}}", (void*)arg1);
    }
    case 247: {
        return fmt::format("io_getevents: {{\n    __u32 ctx_id = {}\n    __s32 min_nr = {}\n    __s32 nr = {}\n    struct io_event *events = {}\n    "
                           "struct old_timespec32 *timeout = {}\n}}",
                           (void*)arg1, (void*)arg2, (void*)arg3, (void*)arg4, (void*)arg5);
    }
    case 248: {
        return fmt::format("io_submit: {{\n    aio_context_t ctx_id = {}\n    long nr = 0x{:x}\n    struct iocb **iocbpp = {}\n}}", (void*)arg1,
                           (u64)arg2, (void*)arg3);
    }
    case 249: {
        return fmt::format("io_cancel: {{\n    aio_context_t ctx_id = {}\n    struct iocb *iocb = {}\n    struct io_event *result = {}\n}}",
                           (void*)arg1, (void*)arg2, (void*)arg3);
    }
    case 250: {
        return fmt::format("fadvise64: {{\n    int fd = 0x{:x}\n    unsigned int offset_lo = 0x{:x}\n    unsigned int offset_hi = 0x{:x}\n    size_t "
                           "len = 0x{:x}\n    int advice = 0x{:x}\n}}",
                           (int)arg1, (int)arg2, (int)arg3, (u64)arg4, (int)arg5);
    }
    case 252: {
        return fmt::format("exit_group: {{\n    int error_code = 0x{:x}\n}}", (int)arg1);
    }
    case 254: {
        return fmt::format("epoll_create: {{\n    int size = 0x{:x}\n}}", (int)arg1);
    }
    case 255: {
        return fmt::format("epoll_ctl: {{\n    int epfd = 0x{:x}\n    int op = 0x{:x}\n    int fd = 0x{:x}\n    struct epoll_event *event = {}\n}}",
                           (int)arg1, (int)arg2, (int)arg3, (void*)arg4);
    }
    case 256: {
        return fmt::format(
            "epoll_wait: {{\n    int epfd = 0x{:x}\n    struct epoll_event *events = {}\n    int maxevents = 0x{:x}\n    int timeout = 0x{:x}\n}}",
            (int)arg1, (void*)arg2, (int)arg3, (int)arg4);
    }
    case 257: {
        return fmt::format("remap_file_pages: {{\n    unsigned long start = 0x{:x}\n    unsigned long size = 0x{:x}\n    unsigned long prot = "
                           "0x{:x}\n    unsigned long pgoff = 0x{:x}\n    unsigned long flags = 0x{:x}\n}}",
                           (u64)arg1, (u64)arg2, (u64)arg3, (u64)arg4, (u64)arg5);
    }
    case 258: {
        return fmt::format("set_tid_address: {{\n    int *tidptr = {}\n}}", (void*)arg1);
    }
    case 259: {
        return fmt::format("timer_create: {{\n    const clockid_t which_clock = {}\n    struct sigevent *timer_event_spec = {}\n    timer_t "
                           "*created_timer_id = {}\n}}",
                           (void*)arg1, (void*)arg2, (void*)arg3);
    }
    case 260: {
        return fmt::format("timer_settime: {{\n    timer_t timer_id = {}\n    int flags = 0x{:x}\n    struct old_itimerspec32 *new = {}\n    struct "
                           "old_itimerspec32 *old = {}\n}}",
                           (void*)arg1, (int)arg2, (void*)arg3, (void*)arg4);
    }
    case 261: {
        return fmt::format("timer_gettime: {{\n    timer_t timer_id = {}\n    struct old_itimerspec32 *setting = {}\n}}", (void*)arg1, (void*)arg2);
    }
    case 262: {
        return fmt::format("timer_getoverrun: {{\n    timer_t timer_id = {}\n}}", (void*)arg1);
    }
    case 263: {
        return fmt::format("timer_delete: {{\n    timer_t timer_id = {}\n}}", (void*)arg1);
    }
    case 264: {
        return fmt::format("clock_settime: {{\n    clockid_t which_clock = {}\n    struct old_timespec32 *tp = {}\n}}", (void*)arg1, (void*)arg2);
    }
    case 265: {
        return fmt::format("clock_gettime: {{\n    clockid_t which_clock = {}\n    struct old_timespec32 *tp = {}\n}}", (void*)arg1, (void*)arg2);
    }
    case 266: {
        return fmt::format("clock_getres: {{\n    clockid_t which_clock = {}\n    struct old_timespec32 *tp = {}\n}}", (void*)arg1, (void*)arg2);
    }
    case 267: {
        return fmt::format("clock_nanosleep: {{\n    clockid_t which_clock = {}\n    int flags = 0x{:x}\n    struct old_timespec32 *rqtp = {}\n    "
                           "struct old_timespec32 *rmtp = {}\n}}",
                           (void*)arg1, (int)arg2, (void*)arg3, (void*)arg4);
    }
    case 268: {
        return fmt::format("statfs64: {{\n    const char *pathname = {}\n    size_t sz = 0x{:x}\n    struct statfs64 *buf = {}\n}}",
                           nullable((const char*)arg1), (u64)arg2, (void*)arg3);
    }
    case 269: {
        return fmt::format("fstatfs64: {{\n    unsigned int fd = 0x{:x}\n    size_t sz = 0x{:x}\n    struct statfs64 *buf = {}\n}}", (int)arg1,
                           (u64)arg2, (void*)arg3);
    }
    case 270: {
        return fmt::format("tgkill: {{\n    pid_t tgid = {}\n    pid_t pid = {}\n    int sig = 0x{:x}\n}}", (void*)arg1, (void*)arg2, (int)arg3);
    }
    case 271: {
        return fmt::format("utimes: {{\n    const char *filename = {}\n    struct old_timeval32 *t = {}\n}}", nullable((const char*)arg1),
                           (void*)arg2);
    }
    case 272: {
        return fmt::format("fadvise64_64: {{\n    int fd = 0x{:x}\n    __u32 offset_low = {}\n    __u32 offset_high = {}\n    __u32 len_low = {}\n   "
                           " __u32 len_high = {}\n    int advice = 0x{:x}\n}}",
                           (int)arg1, (void*)arg2, (void*)arg3, (void*)arg4, (void*)arg5, (int)arg6);
    }
    case 274: {
        return fmt::format("mbind: {{\n    unsigned long start = 0x{:x}\n    unsigned long len = 0x{:x}\n    unsigned long mode = 0x{:x}\n    const "
                           "unsigned long *nmask = {}\n    unsigned long maxnode = 0x{:x}\n    unsigned int flags = 0x{:x}\n}}",
                           (u64)arg1, (u64)arg2, (u64)arg3, (void*)arg4, (u64)arg5, (int)arg6);
    }
    case 275: {
        return fmt::format("get_mempolicy: {{\n    int *policy = {}\n    unsigned long *nmask = {}\n    unsigned long maxnode = 0x{:x}\n    unsigned "
                           "long addr = 0x{:x}\n    unsigned long flags = 0x{:x}\n}}",
                           (void*)arg1, (void*)arg2, (u64)arg3, (u64)arg4, (u64)arg5);
    }
    case 276: {
        return fmt::format("set_mempolicy: {{\n    int mode = 0x{:x}\n    const unsigned long *nmask = {}\n    unsigned long maxnode = 0x{:x}\n}}",
                           (int)arg1, (void*)arg2, (u64)arg3);
    }
    case 277: {
        return fmt::format(
            "mq_open: {{\n    const char *u_name = {}\n    int oflag = 0x{:x}\n    umode_t mode = {}\n    struct mq_attr *u_attr = {}\n}}",
            nullable((const char*)arg1), (int)arg2, (void*)arg3, (void*)arg4);
    }
    case 278: {
        return fmt::format("mq_unlink: {{\n    const char *u_name = {}\n}}", nullable((const char*)arg1));
    }
    case 279: {
        return fmt::format("mq_timedsend: {{\n    mqd_t mqdes = {}\n    const char *u_msg_ptr = {}\n    unsigned int msg_len = 0x{:x}\n    unsigned "
                           "int msg_prio = 0x{:x}\n    const struct old_timespec32 *u_abs_timeout = {}\n}}",
                           (void*)arg1, nullable((const char*)arg2), (int)arg3, (int)arg4, (void*)arg5);
    }
    case 280: {
        return fmt::format("mq_timedreceive: {{\n    mqd_t mqdes = {}\n    char *u_msg_ptr = {}\n    unsigned int msg_len = 0x{:x}\n    unsigned int "
                           "*u_msg_prio = {}\n    const struct old_timespec32 *u_abs_timeout = {}\n}}",
                           (void*)arg1, nullable((const char*)arg2), (int)arg3, (void*)arg4, (void*)arg5);
    }
    case 281: {
        return fmt::format("mq_notify: {{\n    mqd_t mqdes = {}\n    const struct sigevent *u_notification = {}\n}}", (void*)arg1, (void*)arg2);
    }
    case 282: {
        return fmt::format("mq_getsetattr: {{\n    mqd_t mqdes = {}\n    const struct mq_attr *u_mqstat = {}\n    struct mq_attr *u_omqstat = {}\n}}",
                           (void*)arg1, (void*)arg2, (void*)arg3);
    }
    case 283: {
        return fmt::format("kexec_load: {{\n    unsigned long entry = 0x{:x}\n    unsigned long nr_segments = 0x{:x}\n    struct kexec_segment "
                           "*segments = {}\n    unsigned long flags = 0x{:x}\n}}",
                           (u64)arg1, (u64)arg2, (void*)arg3, (u64)arg4);
    }
    case 284: {
        return fmt::format("waitid: {{\n    int which = 0x{:x}\n    pid_t upid = {}\n    struct siginfo *infop = {}\n    int options = 0x{:x}\n    "
                           "struct rusage *ru = {}\n}}",
                           (int)arg1, (void*)arg2, (void*)arg3, (int)arg4, (void*)arg5);
    }
    case 286: {
        return fmt::format("add_key: {{\n    const char *_type = {}\n    const char *_description = {}\n    const void *_payload = {}\n    size_t "
                           "plen = 0x{:x}\n    key_serial_t ringid = {}\n}}",
                           nullable((const char*)arg1), nullable((const char*)arg2), (void*)arg3, (u64)arg4, (void*)arg5);
    }
    case 287: {
        return fmt::format("request_key: {{\n    const char *_type = {}\n    const char *_description = {}\n    const char *_callout_info = {}\n    "
                           "key_serial_t destringid = {}\n}}",
                           nullable((const char*)arg1), nullable((const char*)arg2), nullable((const char*)arg3), (void*)arg4);
    }
    case 288: {
        return fmt::format("keyctl: {{\n    int option = 0x{:x}\n    unsigned long arg2 = 0x{:x}\n    unsigned long arg3 = 0x{:x}\n    unsigned long "
                           "arg4 = 0x{:x}\n    unsigned long arg5 = 0x{:x}\n}}",
                           (int)arg1, (u64)arg2, (u64)arg3, (u64)arg4, (u64)arg5);
    }
    case 289: {
        return fmt::format("ioprio_set: {{\n    int which = 0x{:x}\n    int who = 0x{:x}\n    int ioprio = 0x{:x}\n}}", (int)arg1, (int)arg2,
                           (int)arg3);
    }
    case 290: {
        return fmt::format("ioprio_get: {{\n    int which = 0x{:x}\n    int who = 0x{:x}\n}}", (int)arg1, (int)arg2);
    }
    case 291: {
        return fmt::format("inotify_init: {{}}");
    }
    case 292: {
        return fmt::format("inotify_add_watch: {{\n    int fd = 0x{:x}\n    const char *pathname = {}\n    u32 mask = {}\n}}", (int)arg1,
                           nullable((const char*)arg2), (void*)arg3);
    }
    case 293: {
        return fmt::format("inotify_rm_watch: {{\n    int fd = 0x{:x}\n    __s32 wd = {}\n}}", (int)arg1, (void*)arg2);
    }
    case 294: {
        return fmt::format("migrate_pages: {{\n    pid_t pid = {}\n    unsigned long maxnode = 0x{:x}\n    const unsigned long *old_nodes = {}\n    "
                           "const unsigned long *new_nodes = {}\n}}",
                           (void*)arg1, (u64)arg2, (void*)arg3, (void*)arg4);
    }
    case 295: {
        return fmt::format("openat: {{\n    int dfd = 0x{:x}\n    const char *filename = {}\n    int flags = 0x{:x}\n    umode_t mode = {}\n}}",
                           (int)arg1, nullable((const char*)arg2), (int)arg3, (void*)arg4);
    }
    case 296: {
        return fmt::format("mkdirat: {{\n    int dfd = 0x{:x}\n    const char *pathname = {}\n    umode_t mode = {}\n}}", (int)arg1,
                           nullable((const char*)arg2), (void*)arg3);
    }
    case 297: {
        return fmt::format(
            "mknodat: {{\n    int dfd = 0x{:x}\n    const char *filename = {}\n    umode_t mode = {}\n    unsigned int dev = 0x{:x}\n}}", (int)arg1,
            nullable((const char*)arg2), (void*)arg3, (int)arg4);
    }
    case 298: {
        return fmt::format(
            "fchownat: {{\n    int dfd = 0x{:x}\n    const char *filename = {}\n    uid_t user = {}\n    gid_t group = {}\n    int flag = 0x{:x}\n}}",
            (int)arg1, nullable((const char*)arg2), (void*)arg3, (void*)arg4, (int)arg5);
    }
    case 299: {
        return fmt::format("futimesat: {{\n    unsigned int dfd = 0x{:x}\n    const char *filename = {}\n    struct old_timeval32 *t = {}\n}}",
                           (int)arg1, nullable((const char*)arg2), (void*)arg3);
    }
    case 300: {
        return fmt::format(
            "fstatat64: {{\n    int dfd = 0x{:x}\n    const char *filename = {}\n    struct stat64 *statbuf = {}\n    int flag = 0x{:x}\n}}",
            (int)arg1, nullable((const char*)arg2), (void*)arg3, (int)arg4);
    }
    case 301: {
        return fmt::format("unlinkat: {{\n    int dfd = 0x{:x}\n    const char *pathname = {}\n    int flag = 0x{:x}\n}}", (int)arg1,
                           nullable((const char*)arg2), (int)arg3);
    }
    case 302: {
        return fmt::format(
            "renameat: {{\n    int olddfd = 0x{:x}\n    const char *oldname = {}\n    int newdfd = 0x{:x}\n    const char *newname = {}\n}}",
            (int)arg1, nullable((const char*)arg2), (int)arg3, nullable((const char*)arg4));
    }
    case 303: {
        return fmt::format("linkat: {{\n    int olddfd = 0x{:x}\n    const char *oldname = {}\n    int newdfd = 0x{:x}\n    const char *newname = "
                           "{}\n    int flags = 0x{:x}\n}}",
                           (int)arg1, nullable((const char*)arg2), (int)arg3, nullable((const char*)arg4), (int)arg5);
    }
    case 304: {
        return fmt::format("symlinkat: {{\n    const char *oldname = {}\n    int newdfd = 0x{:x}\n    const char *newname = {}\n}}",
                           nullable((const char*)arg1), (int)arg2, nullable((const char*)arg3));
    }
    case 305: {
        return fmt::format("readlinkat: {{\n    int dfd = 0x{:x}\n    const char *pathname = {}\n    char *buf = {}\n    int bufsiz = 0x{:x}\n}}",
                           (int)arg1, nullable((const char*)arg2), nullable((const char*)arg3), (int)arg4);
    }
    case 306: {
        return fmt::format("fchmodat: {{\n    int dfd = 0x{:x}\n    const char *filename = {}\n    umode_t mode = {}\n}}", (int)arg1,
                           nullable((const char*)arg2), (void*)arg3);
    }
    case 307: {
        return fmt::format("faccessat: {{\n    int dfd = 0x{:x}\n    const char *filename = {}\n    int mode = 0x{:x}\n}}", (int)arg1,
                           nullable((const char*)arg2), (int)arg3);
    }
    case 308: {
        return fmt::format("pselect6: {{\n    int n = 0x{:x}\n    fd_set *inp = {}\n    fd_set *outp = {}\n    fd_set *exp = {}\n    struct "
                           "old_timespec32 *tsp = {}\n    void *sig = {}\n}}",
                           (int)arg1, (void*)arg2, (void*)arg3, (void*)arg4, (void*)arg5, (void*)arg6);
    }
    case 309: {
        return fmt::format("ppoll: {{\n    struct pollfd *ufds = {}\n    unsigned int nfds = 0x{:x}\n    struct old_timespec32 *tsp = {}\n    const "
                           "sigset_t *sigmask = {}\n    size_t sigsetsize = 0x{:x}\n}}",
                           (void*)arg1, (int)arg2, (void*)arg3, (void*)arg4, (u64)arg5);
    }
    case 310: {
        return fmt::format("unshare: {{\n    unsigned long unshare_flags = 0x{:x}\n}}", (u64)arg1);
    }
    case 311: {
        return fmt::format("set_robust_list: {{\n    struct robust_list_head *head = {}\n    size_t len = 0x{:x}\n}}", (void*)arg1, (u64)arg2);
    }
    case 312: {
        return fmt::format("get_robust_list: {{\n    int pid = 0x{:x}\n    struct robust_list_head **head_ptr = {}\n    size_t *len_ptr = {}\n}}",
                           (int)arg1, (void*)arg2, (void*)arg3);
    }
    case 313: {
        return fmt::format("splice: {{\n    int fd_in = 0x{:x}\n    loff_t *off_in = {}\n    int fd_out = 0x{:x}\n    loff_t *off_out = {}\n    "
                           "size_t len = 0x{:x}\n    unsigned int flags = 0x{:x}\n}}",
                           (int)arg1, (void*)arg2, (int)arg3, (void*)arg4, (u64)arg5, (int)arg6);
    }
    case 314: {
        return fmt::format("sync_file_range: {{\n    int fd = 0x{:x}\n    unsigned int off_low = 0x{:x}\n    unsigned int off_hi = 0x{:x}\n    "
                           "unsigned int n_low = 0x{:x}\n    unsigned int n_hi = 0x{:x}\n    int flags = 0x{:x}\n}}",
                           (int)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5, (int)arg6);
    }
    case 315: {
        return fmt::format("tee: {{\n    int fdin = 0x{:x}\n    int fdout = 0x{:x}\n    size_t len = 0x{:x}\n    unsigned int flags = 0x{:x}\n}}",
                           (int)arg1, (int)arg2, (u64)arg3, (int)arg4);
    }
    case 316: {
        return fmt::format("vmsplice: {{\n    int fd = 0x{:x}\n    const struct iovec *uiov = {}\n    unsigned long nr_segs = 0x{:x}\n    unsigned "
                           "int flags = 0x{:x}\n}}",
                           (int)arg1, (void*)arg2, (u64)arg3, (int)arg4);
    }
    case 317: {
        return fmt::format("move_pages: {{\n    pid_t pid = {}\n    unsigned long nr_pages = 0x{:x}\n    const void **pages = {}\n    const int "
                           "*nodes = {}\n    int *status = {}\n    int flags = 0x{:x}\n}}",
                           (void*)arg1, (u64)arg2, (void*)arg3, (void*)arg4, (void*)arg5, (int)arg6);
    }
    case 318: {
        return fmt::format("getcpu: {{\n    unsigned *cpup = {}\n    unsigned *nodep = {}\n    struct getcpu_cache *unused = {}\n}}", (void*)arg1,
                           (void*)arg2, (void*)arg3);
    }
    case 319: {
        return fmt::format("epoll_pwait: {{\n    int epfd = 0x{:x}\n    struct epoll_event *events = {}\n    int maxevents = 0x{:x}\n    int timeout "
                           "= 0x{:x}\n    const sigset_t *sigmask = {}\n    size_t sigsetsize = 0x{:x}\n}}",
                           (int)arg1, (void*)arg2, (int)arg3, (int)arg4, (void*)arg5, (u64)arg6);
    }
    case 320: {
        return fmt::format("utimensat: {{\n    unsigned int dfd = 0x{:x}\n    const char *filename = {}\n    struct old_timespec32 *t = {}\n    int "
                           "flags = 0x{:x}\n}}",
                           (int)arg1, nullable((const char*)arg2), (void*)arg3, (int)arg4);
    }
    case 321: {
        return fmt::format("signalfd: {{\n    int ufd = 0x{:x}\n    sigset_t *user_mask = {}\n    size_t sizemask = 0x{:x}\n}}", (int)arg1,
                           (void*)arg2, (u64)arg3);
    }
    case 322: {
        return fmt::format("timerfd_create: {{\n    int clockid = 0x{:x}\n    int flags = 0x{:x}\n}}", (int)arg1, (int)arg2);
    }
    case 323: {
        return fmt::format("eventfd: {{\n    unsigned int count = 0x{:x}\n}}", (int)arg1);
    }
    case 324: {
        return fmt::format("fallocate: {{\n    int fd = 0x{:x}\n    int mode = 0x{:x}\n    unsigned int offset_lo = 0x{:x}\n    unsigned int "
                           "offset_hi = 0x{:x}\n    unsigned int len_lo = 0x{:x}\n    unsigned int len_hi = 0x{:x}\n}}",
                           (int)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5, (int)arg6);
    }
    case 325: {
        return fmt::format("timerfd_settime: {{\n    int ufd = 0x{:x}\n    int flags = 0x{:x}\n    const struct old_itimerspec32 *utmr = {}\n    "
                           "struct old_itimerspec32 *otmr = {}\n}}",
                           (int)arg1, (int)arg2, (void*)arg3, (void*)arg4);
    }
    case 326: {
        return fmt::format("timerfd_gettime: {{\n    int ufd = 0x{:x}\n    struct old_itimerspec32 *otmr = {}\n}}", (int)arg1, (void*)arg2);
    }
    case 327: {
        return fmt::format(
            "signalfd4: {{\n    int ufd = 0x{:x}\n    sigset_t *user_mask = {}\n    size_t sizemask = 0x{:x}\n    int flags = 0x{:x}\n}}", (int)arg1,
            (void*)arg2, (u64)arg3, (int)arg4);
    }
    case 328: {
        return fmt::format("eventfd2: {{\n    unsigned int count = 0x{:x}\n    int flags = 0x{:x}\n}}", (int)arg1, (int)arg2);
    }
    case 329: {
        return fmt::format("epoll_create1: {{\n    int flags = 0x{:x}\n}}", (int)arg1);
    }
    case 330: {
        return fmt::format("dup3: {{\n    unsigned int oldfd = 0x{:x}\n    unsigned int newfd = 0x{:x}\n    int flags = 0x{:x}\n}}", (int)arg1,
                           (int)arg2, (int)arg3);
    }
    case 331: {
        return fmt::format("pipe2: {{\n    int *fildes = {}\n    int flags = 0x{:x}\n}}", (void*)arg1, (int)arg2);
    }
    case 332: {
        return fmt::format("inotify_init1: {{\n    int flags = 0x{:x}\n}}", (int)arg1);
    }
    case 333: {
        return fmt::format("preadv: {{\n    unsigned long fd = 0x{:x}\n    const struct iovec *vec = {}\n    unsigned long vlen = 0x{:x}\n    "
                           "unsigned long pos_l = 0x{:x}\n    unsigned long pos_h = 0x{:x}\n}}",
                           (u64)arg1, (void*)arg2, (u64)arg3, (u64)arg4, (u64)arg5);
    }
    case 334: {
        return fmt::format("pwritev: {{\n    unsigned long fd = 0x{:x}\n    const struct iovec *vec = {}\n    unsigned long vlen = 0x{:x}\n    "
                           "unsigned long pos_l = 0x{:x}\n    unsigned long pos_h = 0x{:x}\n}}",
                           (u64)arg1, (void*)arg2, (u64)arg3, (u64)arg4, (u64)arg5);
    }
    case 335: {
        return fmt::format("rt_tgsigqueueinfo: {{\n    pid_t tgid = {}\n    pid_t pid = {}\n    int sig = 0x{:x}\n    siginfo_t *uinfo = {}\n}}",
                           (void*)arg1, (void*)arg2, (int)arg3, (void*)arg4);
    }
    case 336: {
        return fmt::format("perf_event_open: {{\n    struct perf_event_attr *attr_uptr = {}\n    pid_t pid = {}\n    int cpu = 0x{:x}\n    int "
                           "group_fd = 0x{:x}\n    unsigned long flags = 0x{:x}\n}}",
                           (void*)arg1, (void*)arg2, (int)arg3, (int)arg4, (u64)arg5);
    }
    case 337: {
        return fmt::format("recvmmsg: {{\n    int fd = 0x{:x}\n    struct mmsghdr *mmsg = {}\n    unsigned int vlen = 0x{:x}\n    unsigned int flags "
                           "= 0x{:x}\n    struct old_timespec32 *timeout = {}\n}}",
                           (int)arg1, (void*)arg2, (int)arg3, (int)arg4, (void*)arg5);
    }
    case 338: {
        return fmt::format("fanotify_init: {{\n    unsigned int flags = 0x{:x}\n    unsigned int event_f_flags = 0x{:x}\n}}", (int)arg1, (int)arg2);
    }
    case 339: {
        return fmt::format("fanotify_mark: {{\n    int fanotify_fd = 0x{:x}\n    unsigned int flags = 0x{:x}\n    u32 mask_lo = {}\n    u32 mask_hi "
                           "= {}\n    int dfd = 0x{:x}\n    const char *pathname = {}\n}}",
                           (int)arg1, (int)arg2, (void*)arg3, (void*)arg4, (int)arg5, nullable((const char*)arg6));
    }
    case 340: {
        return fmt::format("prlimit64: {{\n    pid_t pid = {}\n    unsigned int resource = 0x{:x}\n    const struct rlimit64 *new_rlim = {}\n    "
                           "struct rlimit64 *old_rlim = {}\n}}",
                           (void*)arg1, (int)arg2, (void*)arg3, (void*)arg4);
    }
    case 341: {
        return fmt::format("name_to_handle_at: {{\n    int dfd = 0x{:x}\n    const char *name = {}\n    struct file_handle *handle = {}\n    int "
                           "*mnt_id = {}\n    int flag = 0x{:x}\n}}",
                           (int)arg1, nullable((const char*)arg2), (void*)arg3, (void*)arg4, (int)arg5);
    }
    case 342: {
        return fmt::format("open_by_handle_at: {{\n    int mountdirfd = 0x{:x}\n    struct file_handle *handle = {}\n    int flags = 0x{:x}\n}}",
                           (int)arg1, (void*)arg2, (int)arg3);
    }
    case 343: {
        return fmt::format("clock_adjtime: {{\n    clockid_t which_clock = {}\n    struct old_timex32 *utp = {}\n}}", (void*)arg1, (void*)arg2);
    }
    case 344: {
        return fmt::format("syncfs: {{\n    int fd = 0x{:x}\n}}", (int)arg1);
    }
    case 345: {
        return fmt::format(
            "sendmmsg: {{\n    int fd = 0x{:x}\n    struct mmsghdr *mmsg = {}\n    unsigned int vlen = 0x{:x}\n    unsigned int flags = 0x{:x}\n}}",
            (int)arg1, (void*)arg2, (int)arg3, (int)arg4);
    }
    case 346: {
        return fmt::format("setns: {{\n    int fd = 0x{:x}\n    int flags = 0x{:x}\n}}", (int)arg1, (int)arg2);
    }
    case 347: {
        return fmt::format("process_vm_readv: {{\n    pid_t pid = {}\n    const struct iovec *lvec = {}\n    unsigned long liovcnt = 0x{:x}\n    "
                           "const struct iovec *rvec = {}\n    unsigned long riovcnt = 0x{:x}\n    unsigned long flags = 0x{:x}\n}}",
                           (void*)arg1, (void*)arg2, (u64)arg3, (void*)arg4, (u64)arg5, (u64)arg6);
    }
    case 348: {
        return fmt::format("process_vm_writev: {{\n    pid_t pid = {}\n    const struct iovec *lvec = {}\n    unsigned long liovcnt = 0x{:x}\n    "
                           "const struct iovec *rvec = {}\n    unsigned long riovcnt = 0x{:x}\n    unsigned long flags = 0x{:x}\n}}",
                           (void*)arg1, (void*)arg2, (u64)arg3, (void*)arg4, (u64)arg5, (u64)arg6);
    }
    case 349: {
        return fmt::format("kcmp: {{\n    pid_t pid1 = {}\n    pid_t pid2 = {}\n    int type = 0x{:x}\n    unsigned long idx1 = 0x{:x}\n    unsigned "
                           "long idx2 = 0x{:x}\n}}",
                           (void*)arg1, (void*)arg2, (int)arg3, (u64)arg4, (u64)arg5);
    }
    case 350: {
        return fmt::format("finit_module: {{\n    int fd = 0x{:x}\n    const char *uargs = {}\n    int flags = 0x{:x}\n}}", (int)arg1,
                           nullable((const char*)arg2), (int)arg3);
    }
    case 351: {
        return fmt::format("sched_setattr: {{\n    pid_t pid = {}\n    struct sched_attr *uattr = {}\n    unsigned int flags = 0x{:x}\n}}",
                           (void*)arg1, (void*)arg2, (int)arg3);
    }
    case 352: {
        return fmt::format("sched_getattr: {{\n    pid_t pid = {}\n    struct sched_attr *uattr = {}\n    unsigned int usize = 0x{:x}\n    unsigned "
                           "int flags = 0x{:x}\n}}",
                           (void*)arg1, (void*)arg2, (int)arg3, (int)arg4);
    }
    case 353: {
        return fmt::format("renameat2: {{\n    int olddfd = 0x{:x}\n    const char *oldname = {}\n    int newdfd = 0x{:x}\n    const char *newname = "
                           "{}\n    unsigned int flags = 0x{:x}\n}}",
                           (int)arg1, nullable((const char*)arg2), (int)arg3, nullable((const char*)arg4), (int)arg5);
    }
    case 354: {
        return fmt::format("seccomp: {{\n    unsigned int op = 0x{:x}\n    unsigned int flags = 0x{:x}\n    void *uargs = {}\n}}", (int)arg1,
                           (int)arg2, (void*)arg3);
    }
    case 355: {
        return fmt::format("getrandom: {{\n    char *ubuf = {}\n    size_t len = 0x{:x}\n    unsigned int flags = 0x{:x}\n}}",
                           nullable((const char*)arg1), (u64)arg2, (int)arg3);
    }
    case 356: {
        return fmt::format("memfd_create: {{\n    const char *uname = {}\n    unsigned int flags = 0x{:x}\n}}", nullable((const char*)arg1),
                           (int)arg2);
    }
    case 357: {
        return fmt::format("bpf: {{\n    int cmd = 0x{:x}\n    union bpf_attr *uattr = {}\n    unsigned int size = 0x{:x}\n}}", (int)arg1,
                           (void*)arg2, (int)arg3);
    }
    case 358: {
        return fmt::format("execveat: {{\n    int fd = 0x{:x}\n    const char *filename = {}\n    const char *const *argv = {}\n    const char "
                           "*const *envp = {}\n    int flags = 0x{:x}\n}}",
                           (int)arg1, nullable((const char*)arg2), (void*)arg3, (void*)arg4, (int)arg5);
    }
    case 359: {
        return fmt::format("socket: {{\n    int family = 0x{:x}\n    int type = 0x{:x}\n    int protocol = 0x{:x}\n}}", (int)arg1, (int)arg2,
                           (int)arg3);
    }
    case 360: {
        return fmt::format("socketpair: {{\n    int family = 0x{:x}\n    int type = 0x{:x}\n    int protocol = 0x{:x}\n    int *usockvec = {}\n}}",
                           (int)arg1, (int)arg2, (int)arg3, (void*)arg4);
    }
    case 361: {
        return fmt::format("bind: {{\n    int fd = 0x{:x}\n    struct sockaddr *umyaddr = {}\n    int addrlen = 0x{:x}\n}}", (int)arg1, (void*)arg2,
                           (int)arg3);
    }
    case 362: {
        return fmt::format("connect: {{\n    int fd = 0x{:x}\n    struct sockaddr *uservaddr = {}\n    int addrlen = 0x{:x}\n}}", (int)arg1,
                           (void*)arg2, (int)arg3);
    }
    case 363: {
        return fmt::format("listen: {{\n    int fd = 0x{:x}\n    int backlog = 0x{:x}\n}}", (int)arg1, (int)arg2);
    }
    case 364: {
        return fmt::format(
            "accept4: {{\n    int fd = 0x{:x}\n    struct sockaddr *upeer_sockaddr = {}\n    int *upeer_addrlen = {}\n    int flags = 0x{:x}\n}}",
            (int)arg1, (void*)arg2, (void*)arg3, (int)arg4);
    }
    case 365: {
        return fmt::format(
            "getsockopt: {{\n    int fd = 0x{:x}\n    int level = 0x{:x}\n    int optname = 0x{:x}\n    char *optval = {}\n    int *optlen = {}\n}}",
            (int)arg1, (int)arg2, (int)arg3, nullable((const char*)arg4), (void*)arg5);
    }
    case 366: {
        return fmt::format("setsockopt: {{\n    int fd = 0x{:x}\n    int level = 0x{:x}\n    int optname = 0x{:x}\n    char *optval = {}\n    int "
                           "optlen = 0x{:x}\n}}",
                           (int)arg1, (int)arg2, (int)arg3, nullable((const char*)arg4), (int)arg5);
    }
    case 367: {
        return fmt::format("getsockname: {{\n    int fd = 0x{:x}\n    struct sockaddr *usockaddr = {}\n    int *usockaddr_len = {}\n}}", (int)arg1,
                           (void*)arg2, (void*)arg3);
    }
    case 368: {
        return fmt::format("getpeername: {{\n    int fd = 0x{:x}\n    struct sockaddr *usockaddr = {}\n    int *usockaddr_len = {}\n}}", (int)arg1,
                           (void*)arg2, (void*)arg3);
    }
    case 369: {
        return fmt::format("sendto: {{\n    int fd = 0x{:x}\n    void *buff = {}\n    size_t len = 0x{:x}\n    unsigned int flags = 0x{:x}\n    "
                           "struct sockaddr *addr = {}\n    int addr_len = 0x{:x}\n}}",
                           (int)arg1, (void*)arg2, (u64)arg3, (int)arg4, (void*)arg5, (int)arg6);
    }
    case 370: {
        return fmt::format("sendmsg: {{\n    int fd = 0x{:x}\n    struct user_msghdr *msg = {}\n    unsigned int flags = 0x{:x}\n}}", (int)arg1,
                           (void*)arg2, (int)arg3);
    }
    case 371: {
        return fmt::format("recvfrom: {{\n    int fd = 0x{:x}\n    void *ubuf = {}\n    size_t size = 0x{:x}\n    unsigned int flags = 0x{:x}\n    "
                           "struct sockaddr *addr = {}\n    int *addr_len = {}\n}}",
                           (int)arg1, (void*)arg2, (u64)arg3, (int)arg4, (void*)arg5, (void*)arg6);
    }
    case 372: {
        return fmt::format("recvmsg: {{\n    int fd = 0x{:x}\n    struct user_msghdr *msg = {}\n    unsigned int flags = 0x{:x}\n}}", (int)arg1,
                           (void*)arg2, (int)arg3);
    }
    case 373: {
        return fmt::format("shutdown: {{\n    int fd = 0x{:x}\n    int how = 0x{:x}\n}}", (int)arg1, (int)arg2);
    }
    case 374: {
        return fmt::format("userfaultfd: {{\n    int flags = 0x{:x}\n}}", (int)arg1);
    }
    case 375: {
        return fmt::format("membarrier: {{\n    int cmd = 0x{:x}\n    unsigned int flags = 0x{:x}\n    int cpu_id = 0x{:x}\n}}", (int)arg1, (int)arg2,
                           (int)arg3);
    }
    case 376: {
        return fmt::format("mlock2: {{\n    unsigned long start = 0x{:x}\n    size_t len = 0x{:x}\n    int flags = 0x{:x}\n}}", (u64)arg1, (u64)arg2,
                           (int)arg3);
    }
    case 377: {
        return fmt::format("copy_file_range: {{\n    int fd_in = 0x{:x}\n    loff_t *off_in = {}\n    int fd_out = 0x{:x}\n    loff_t *off_out = "
                           "{}\n    size_t len = 0x{:x}\n    unsigned int flags = 0x{:x}\n}}",
                           (int)arg1, (void*)arg2, (int)arg3, (void*)arg4, (u64)arg5, (int)arg6);
    }
    case 378: {
        return fmt::format("preadv2: {{\n    unsigned long fd = 0x{:x}\n    const struct iovec *vec = {}\n    unsigned long vlen = 0x{:x}\n    "
                           "unsigned long pos_l = 0x{:x}\n    unsigned long pos_h = 0x{:x}\n    rwf_t flags = {}\n}}",
                           (u64)arg1, (void*)arg2, (u64)arg3, (u64)arg4, (u64)arg5, (void*)arg6);
    }
    case 379: {
        return fmt::format("pwritev2: {{\n    unsigned long fd = 0x{:x}\n    const struct iovec *vec = {}\n    unsigned long vlen = 0x{:x}\n    "
                           "unsigned long pos_l = 0x{:x}\n    unsigned long pos_h = 0x{:x}\n    rwf_t flags = {}\n}}",
                           (u64)arg1, (void*)arg2, (u64)arg3, (u64)arg4, (u64)arg5, (void*)arg6);
    }
    case 383: {
        return fmt::format("statx: {{\n    int dfd = 0x{:x}\n    const char *filename = {}\n    unsigned flags = {}\n    unsigned int mask = "
                           "0x{:x}\n    struct statx *buffer = {}\n}}",
                           (int)arg1, nullable((const char*)arg2), (void*)arg3, (int)arg4, (void*)arg5);
    }
    case 384: {
        return fmt::format("arch_prctl: {{\n    int option = 0x{:x}\n    unsigned long arg2 = 0x{:x}\n}}", (int)arg1, (u64)arg2);
    }
    case 385: {
        return fmt::format("io_pgetevents: {{\n    aio_context_t ctx_id = {}\n    long min_nr = 0x{:x}\n    long nr = 0x{:x}\n    struct io_event "
                           "*events = {}\n    struct old_timespec32 *timeout = {}\n    const struct __aio_sigset *usig = {}\n}}",
                           (void*)arg1, (u64)arg2, (u64)arg3, (void*)arg4, (void*)arg5, (void*)arg6);
    }
    case 386: {
        return fmt::format("rseq: {{\n    struct rseq *rseq = {}\n    u32 rseq_len = {}\n    int flags = 0x{:x}\n    u32 sig = {}\n}}", (void*)arg1,
                           (void*)arg2, (int)arg3, (void*)arg4);
    }
    case 393: {
        return fmt::format("semget: {{\n    key_t key = {}\n    int nsems = 0x{:x}\n    int semflg = 0x{:x}\n}}", (void*)arg1, (int)arg2, (int)arg3);
    }
    case 394: {
        return fmt::format("semctl: {{\n    int semid = 0x{:x}\n    int semnum = 0x{:x}\n    int cmd = 0x{:x}\n    unsigned long arg = 0x{:x}\n}}",
                           (int)arg1, (int)arg2, (int)arg3, (u64)arg4);
    }
    case 395: {
        return fmt::format("shmget: {{\n    key_t key = {}\n    size_t size = 0x{:x}\n    int shmflg = 0x{:x}\n}}", (void*)arg1, (u64)arg2,
                           (int)arg3);
    }
    case 396: {
        return fmt::format("shmctl: {{\n    int shmid = 0x{:x}\n    int cmd = 0x{:x}\n    struct shmid_ds *buf = {}\n}}", (int)arg1, (int)arg2,
                           (void*)arg3);
    }
    case 397: {
        return fmt::format("shmat: {{\n    int shmid = 0x{:x}\n    char *shmaddr = {}\n    int shmflg = 0x{:x}\n}}", (int)arg1,
                           nullable((const char*)arg2), (int)arg3);
    }
    case 398: {
        return fmt::format("shmdt: {{\n    void *shmaddr = 0x{:x}\n}}", arg1);
    }
    case 399: {
        return fmt::format("msgget: {{\n    key_t key = {}\n    int msgflg = 0x{:x}\n}}", (void*)arg1, (int)arg2);
    }
    case 400: {
        return fmt::format("msgsnd: {{\n    int msqid = 0x{:x}\n    struct msgbuf *msgp = {}\n    size_t msgsz = 0x{:x}\n    int msgflg = 0x{:x}\n}}",
                           (int)arg1, (void*)arg2, (u64)arg3, (int)arg4);
    }
    case 401: {
        return fmt::format("msgrcv: {{\n    int msqid = 0x{:x}\n    struct msgbuf *msgp = {}\n    size_t msgsz = 0x{:x}\n    long msgtyp = 0x{:x}\n  "
                           "  int msgflg = 0x{:x}\n}}",
                           (int)arg1, (void*)arg2, (u64)arg3, (u64)arg4, (int)arg5);
    }
    case 402: {
        return fmt::format("msgctl: {{\n    int msqid = 0x{:x}\n    int cmd = 0x{:x}\n    struct msqid_ds *buf = {}\n}}", (int)arg1, (int)arg2,
                           (void*)arg3);
    }
    case 403: {
        return fmt::format("clock_gettime: {{\n    const clockid_t which_clock = {}\n    struct __kernel_timespec *tp = {}\n}}", (void*)arg1,
                           (void*)arg2);
    }
    case 404: {
        return fmt::format("clock_settime: {{\n    const clockid_t which_clock = {}\n    const struct __kernel_timespec *tp = {}\n}}", (void*)arg1,
                           (void*)arg2);
    }
    case 405: {
        return fmt::format("clock_adjtime: {{\n    const clockid_t which_clock = {}\n    struct __kernel_timex *utx = {}\n}}", (void*)arg1,
                           (void*)arg2);
    }
    case 406: {
        return fmt::format("clock_getres: {{\n    const clockid_t which_clock = {}\n    struct __kernel_timespec *tp = {}\n}}", (void*)arg1,
                           (void*)arg2);
    }
    case 407: {
        return fmt::format("clock_nanosleep: {{\n    const clockid_t which_clock = {}\n    int flags = 0x{:x}\n    const struct __kernel_timespec "
                           "*rqtp = {}\n    struct __kernel_timespec *rmtp = {}\n}}",
                           (void*)arg1, (int)arg2, (void*)arg3, (void*)arg4);
    }
    case 408: {
        return fmt::format("timer_gettime: {{\n    timer_t timer_id = {}\n    struct __kernel_itimerspec *setting = {}\n}}", (void*)arg1,
                           (void*)arg2);
    }
    case 409: {
        return fmt::format("timer_settime: {{\n    timer_t timer_id = {}\n    int flags = 0x{:x}\n    const struct __kernel_itimerspec *new_setting "
                           "= {}\n    struct __kernel_itimerspec *old_setting = {}\n}}",
                           (void*)arg1, (int)arg2, (void*)arg3, (void*)arg4);
    }
    case 410: {
        return fmt::format("timerfd_gettime: {{\n    int ufd = 0x{:x}\n    struct __kernel_itimerspec *otmr = {}\n}}", (int)arg1, (void*)arg2);
    }
    case 411: {
        return fmt::format("timerfd_settime: {{\n    int ufd = 0x{:x}\n    int flags = 0x{:x}\n    const struct __kernel_itimerspec *utmr = {}\n    "
                           "struct __kernel_itimerspec *otmr = {}\n}}",
                           (int)arg1, (int)arg2, (void*)arg3, (void*)arg4);
    }
    case 412: {
        return fmt::format("utimensat: {{\n    int dfd = 0x{:x}\n    const char *filename = {}\n    struct __kernel_timespec *utimes = {}\n    int "
                           "flags = 0x{:x}\n}}",
                           (int)arg1, nullable((const char*)arg2), (void*)arg3, (int)arg4);
    }
    case 413: {
        return fmt::format("pselect6: {{\n    int n = 0x{:x}\n    fd_set *inp = {}\n    fd_set *outp = {}\n    fd_set *exp = {}\n    struct "
                           "__kernel_timespec *tsp = {}\n    void *sig = {}\n}}",
                           (int)arg1, (void*)arg2, (void*)arg3, (void*)arg4, (void*)arg5, (void*)arg6);
    }
    case 414: {
        return fmt::format("ppoll: {{\n    struct pollfd *ufds = {}\n    unsigned int nfds = 0x{:x}\n    struct __kernel_timespec *tsp = {}\n    "
                           "const sigset_t *sigmask = {}\n    size_t sigsetsize = 0x{:x}\n}}",
                           (void*)arg1, (int)arg2, (void*)arg3, (void*)arg4, (u64)arg5);
    }
    case 416: {
        return fmt::format("io_pgetevents: {{\n    aio_context_t ctx_id = {}\n    long min_nr = 0x{:x}\n    long nr = 0x{:x}\n    struct io_event "
                           "*events = {}\n    struct __kernel_timespec *timeout = {}\n    const struct __aio_sigset *usig = {}\n}}",
                           (void*)arg1, (u64)arg2, (u64)arg3, (void*)arg4, (void*)arg5, (void*)arg6);
    }
    case 417: {
        return fmt::format("recvmmsg: {{\n    int fd = 0x{:x}\n    struct mmsghdr *mmsg = {}\n    unsigned int vlen = 0x{:x}\n    unsigned int flags "
                           "= 0x{:x}\n    struct __kernel_timespec *timeout = {}\n}}",
                           (int)arg1, (void*)arg2, (int)arg3, (int)arg4, (void*)arg5);
    }
    case 418: {
        return fmt::format("mq_timedsend: {{\n    mqd_t mqdes = {}\n    const char *u_msg_ptr = {}\n    size_t msg_len = 0x{:x}\n    unsigned int "
                           "msg_prio = 0x{:x}\n    const struct __kernel_timespec *u_abs_timeout = {}\n}}",
                           (void*)arg1, nullable((const char*)arg2), (u64)arg3, (int)arg4, (void*)arg5);
    }
    case 419: {
        return fmt::format("mq_timedreceive: {{\n    mqd_t mqdes = {}\n    char *u_msg_ptr = {}\n    size_t msg_len = 0x{:x}\n    unsigned int "
                           "*u_msg_prio = {}\n    const struct __kernel_timespec *u_abs_timeout = {}\n}}",
                           (void*)arg1, nullable((const char*)arg2), (u64)arg3, (void*)arg4, (void*)arg5);
    }
    case 420: {
        return fmt::format("semtimedop: {{\n    int semid = 0x{:x}\n    struct sembuf *tsops = {}\n    unsigned int nsops = 0x{:x}\n    const struct "
                           "__kernel_timespec *timeout = {}\n}}",
                           (int)arg1, (void*)arg2, (int)arg3, (void*)arg4);
    }
    case 421: {
        return fmt::format("rt_sigtimedwait: {{\n    const sigset_t *uthese = {}\n    siginfo_t *uinfo = {}\n    const struct __kernel_timespec *uts "
                           "= {}\n    size_t sigsetsize = 0x{:x}\n}}",
                           (void*)arg1, (void*)arg2, (void*)arg3, (u64)arg4);
    }
    case 422: {
        return fmt::format("futex: {{\n    u32 *uaddr = {}\n    int op = 0x{:x}\n    u32 val = {}\n    const struct __kernel_timespec *utime = {}\n  "
                           "  u32 *uaddr2 = {}\n    u32 val3 = {}\n}}",
                           (void*)arg1, (int)arg2, (void*)arg3, (void*)arg4, (void*)arg5, (void*)arg6);
    }
    case 423: {
        return fmt::format("sched_rr_get_interval: {{\n    pid_t pid = {}\n    struct __kernel_timespec *interval = {}\n}}", (void*)arg1,
                           (void*)arg2);
    }
    case 424: {
        return fmt::format(
            "pidfd_send_signal: {{\n    int pidfd = 0x{:x}\n    int sig = 0x{:x}\n    siginfo_t *info = {}\n    unsigned int flags = 0x{:x}\n}}",
            (int)arg1, (int)arg2, (void*)arg3, (int)arg4);
    }
    case 425: {
        return fmt::format("io_uring_setup: {{\n    u32 entries = {}\n    struct io_uring_params *params = {}\n}}", (void*)arg1, (void*)arg2);
    }
    case 426: {
        return fmt::format("io_uring_enter: {{\n    unsigned int fd = 0x{:x}\n    u32 to_submit = {}\n    u32 min_complete = {}\n    u32 flags = "
                           "{}\n    const void *argp = {}\n    size_t argsz = 0x{:x}\n}}",
                           (int)arg1, (void*)arg2, (void*)arg3, (void*)arg4, (void*)arg5, (u64)arg6);
    }
    case 427: {
        return fmt::format("io_uring_register: {{\n    unsigned int fd = 0x{:x}\n    unsigned int opcode = 0x{:x}\n    void *arg = {}\n    unsigned "
                           "int nr_args = 0x{:x}\n}}",
                           (int)arg1, (int)arg2, (void*)arg3, (int)arg4);
    }
    case 428: {
        return fmt::format("open_tree: {{\n    int dfd = 0x{:x}\n    const char *filename = {}\n    unsigned flags = {}\n}}", (int)arg1,
                           nullable((const char*)arg2), (void*)arg3);
    }
    case 429: {
        return fmt::format("move_mount: {{\n    int from_dfd = 0x{:x}\n    const char *from_pathname = {}\n    int to_dfd = 0x{:x}\n    const char "
                           "*to_pathname = {}\n    unsigned int flags = 0x{:x}\n}}",
                           (int)arg1, nullable((const char*)arg2), (int)arg3, nullable((const char*)arg4), (int)arg5);
    }
    case 430: {
        return fmt::format("fsopen: {{\n    const char *_fs_name = {}\n    unsigned int flags = 0x{:x}\n}}", nullable((const char*)arg1), (int)arg2);
    }
    case 431: {
        return fmt::format("fsconfig: {{\n    int fd = 0x{:x}\n    unsigned int cmd = 0x{:x}\n    const char *_key = {}\n    const void *_value = "
                           "{}\n    int aux = 0x{:x}\n}}",
                           (int)arg1, (int)arg2, nullable((const char*)arg3), (void*)arg4, (int)arg5);
    }
    case 432: {
        return fmt::format("fsmount: {{\n    int fs_fd = 0x{:x}\n    unsigned int flags = 0x{:x}\n    unsigned int attr_flags = 0x{:x}\n}}",
                           (int)arg1, (int)arg2, (int)arg3);
    }
    case 433: {
        return fmt::format("fspick: {{\n    int dfd = 0x{:x}\n    const char *path = {}\n    unsigned int flags = 0x{:x}\n}}", (int)arg1,
                           nullable((const char*)arg2), (int)arg3);
    }
    case 434: {
        return fmt::format("pidfd_open: {{\n    pid_t pid = {}\n    unsigned int flags = 0x{:x}\n}}", (void*)arg1, (int)arg2);
    }
    case 435: {
        return fmt::format("clone3: {{\n    struct clone_args *uargs = {}\n    size_t size = 0x{:x}\n}}", (void*)arg1, (u64)arg2);
    }
    case 436: {
        return fmt::format("close_range: {{\n    unsigned int fd = 0x{:x}\n    unsigned int max_fd = 0x{:x}\n    unsigned int flags = 0x{:x}\n}}",
                           (int)arg1, (int)arg2, (int)arg3);
    }
    case 437: {
        return fmt::format(
            "openat2: {{\n    int dfd = 0x{:x}\n    const char *filename = {}\n    struct open_how *how = {}\n    size_t usize = 0x{:x}\n}}",
            (int)arg1, nullable((const char*)arg2), (void*)arg3, (u64)arg4);
    }
    case 438: {
        return fmt::format("pidfd_getfd: {{\n    int pidfd = 0x{:x}\n    int fd = 0x{:x}\n    unsigned int flags = 0x{:x}\n}}", (int)arg1, (int)arg2,
                           (int)arg3);
    }
    case 439: {
        return fmt::format("faccessat2: {{\n    int dfd = 0x{:x}\n    const char *filename = {}\n    int mode = 0x{:x}\n    int flags = 0x{:x}\n}}",
                           (int)arg1, nullable((const char*)arg2), (int)arg3, (int)arg4);
    }
    case 440: {
        return fmt::format("process_madvise: {{\n    int pidfd = 0x{:x}\n    const struct iovec *vec = {}\n    size_t vlen = 0x{:x}\n    int "
                           "behavior = 0x{:x}\n    unsigned int flags = 0x{:x}\n}}",
                           (int)arg1, (void*)arg2, (u64)arg3, (int)arg4, (int)arg5);
    }
    case 441: {
        return fmt::format("epoll_pwait2: {{\n    int epfd = 0x{:x}\n    struct epoll_event *events = {}\n    int maxevents = 0x{:x}\n    const "
                           "struct __kernel_timespec *timeout = {}\n    const sigset_t *sigmask = {}\n    size_t sigsetsize = 0x{:x}\n}}",
                           (int)arg1, (void*)arg2, (int)arg3, (void*)arg4, (void*)arg5, (u64)arg6);
    }
    case 442: {
        return fmt::format("mount_setattr: {{\n    int dfd = 0x{:x}\n    const char *path = {}\n    unsigned int flags = 0x{:x}\n    struct "
                           "mount_attr *uattr = {}\n    size_t usize = 0x{:x}\n}}",
                           (int)arg1, nullable((const char*)arg2), (int)arg3, (void*)arg4, (u64)arg5);
    }
    case 443: {
        return fmt::format("quotactl_fd: {{\n    unsigned int fd = 0x{:x}\n    unsigned int cmd = 0x{:x}\n    qid_t id = {}\n    void *addr = {}\n}}",
                           (int)arg1, (int)arg2, (void*)arg3, (void*)arg4);
    }
    case 444: {
        return fmt::format("landlock_create_ruleset: {{\n    const struct landlock_ruleset_attr *const attr = {}\n    const size_t size = {}\n    "
                           "const __u32 flags = {}\n}}",
                           (void*)arg1, (void*)arg2, (void*)arg3);
    }
    case 445: {
        return fmt::format("landlock_add_rule: {{\n    const int ruleset_fd = {}\n    const enum landlock_rule_type rule_type = {}\n    const void "
                           "*const rule_attr = {}\n    const __u32 flags = {}\n}}",
                           (void*)arg1, (void*)arg2, (void*)arg3, (void*)arg4);
    }
    case 446: {
        return fmt::format("landlock_restrict_self: {{\n    const int ruleset_fd = {}\n    const __u32 flags = {}\n}}", (void*)arg1, (void*)arg2);
    }
    case 447: {
        return fmt::format("memfd_secret: {{\n    unsigned int flags = 0x{:x}\n}}", (int)arg1);
    }
    case 448: {
        return fmt::format("process_mrelease: {{\n    int pidfd = 0x{:x}\n    unsigned int flags = 0x{:x}\n}}", (int)arg1, (int)arg2);
    }
    case 449: {
        return fmt::format("futex_waitv: {{\n    struct futex_waitv *waiters = {}\n    unsigned int nr_futexes = 0x{:x}\n    unsigned int flags = "
                           "0x{:x}\n    struct __kernel_timespec *timeout = {}\n    clockid_t clockid = {}\n}}",
                           (void*)arg1, (int)arg2, (int)arg3, (void*)arg4, (void*)arg5);
    }
    case 450: {
        return fmt::format("set_mempolicy_home_node: {{\n    unsigned long start = 0x{:x}\n    unsigned long len = 0x{:x}\n    unsigned long "
                           "home_node = 0x{:x}\n    unsigned long flags = 0x{:x}\n}}",
                           (u64)arg1, (u64)arg2, (u64)arg3, (u64)arg4);
    }
    default:
        ERROR("Unknown syscall: %d", syscall_no);
        return "";
    }
}
